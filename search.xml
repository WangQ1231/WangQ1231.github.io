<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS各进制之间的转换</title>
      <link href="/wangq1231/2022/01/02/JS%E2%95%95%D1%9E%E2%95%9C%C2%B0%E2%95%93%E2%95%9E%E2%95%93%D0%BE%E2%95%9D%D1%84%E2%95%A1%E2%94%80%E2%95%AB%D0%BA%E2%95%97%E2%95%97/"/>
      <url>/wangq1231/2022/01/02/JS%E2%95%95%D1%9E%E2%95%9C%C2%B0%E2%95%93%E2%95%9E%E2%95%93%D0%BE%E2%95%9D%D1%84%E2%95%A1%E2%94%80%E2%95%AB%D0%BA%E2%95%97%E2%95%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><p>做算法机试题的过程中经常会遇到字符的比较，字符转为二进制、十六进制等的转化。时常会忘记具体的实现方法，现做一下总结帮助记忆</p><h3 id="1-ASCII码和字符的转化"><a href="#1-ASCII码和字符的转化" class="headerlink" title="1.ASCII码和字符的转化"></a>1.ASCII码和字符的转化</h3><p>使用 <strong><code>charCodeAt</code>和<code>fromCharCode</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> code = str.charCodeAt(); <span class="comment">// charCodeAt获取字符对应的ASCII码</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="built_in">String</span>.fromCharCode(code); <span class="comment">// String的fromCharCode方法根据ASCII获取字符</span></span><br></pre></td></tr></table></figure><br><h3 id="2-十进制转二进制"><a href="#2-十进制转二进制" class="headerlink" title="2.十进制转二进制"></a>2.十进制转二进制</h3><p>使用 <strong><code>toString(2)</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line">a.toString(<span class="number">2</span>)  <span class="comment">// &#x27;101&#x27;</span></span><br></pre></td></tr></table></figure><p>八进制，十六进制同理，只需要将参数2改成8、16即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">64</span></span><br><span class="line">a.toString(<span class="number">8</span>)  <span class="comment">// &#x27;100&#x27;</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">15</span></span><br><span class="line">b.toString(<span class="number">16</span>) <span class="comment">// &#x27;f&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>注意这里前面的数是Number类型，转化为二进制后为String类型</strong></p><br><h3 id="3-二进制转十进制"><a href="#3-二进制转十进制" class="headerlink" title="3.二进制转十进制"></a>3.二进制转十进制</h3><p>使用 <strong><code>parseInt(str, 2)</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;1100&#x27;</span></span><br><span class="line"><span class="built_in">parseInt</span>(a, <span class="number">2</span>)  <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><p>八进制，十六进制转10进制也同理，只需要将第二个参数2改为 8、16即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;10&#x27;</span> <span class="comment">// 八进制的10表示十进制的8</span></span><br><span class="line"><span class="built_in">parseInt</span>(a, <span class="number">8</span>) <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;f&#x27;</span> <span class="comment">// 十六进制的f表示十进制的15</span></span><br><span class="line"><span class="built_in">parseInt</span>(b, <span class="number">16</span>)  <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p><strong>注意这里前面的数是String类型，转化为十进制后为Number类型</strong></p>]]></content>
      
      
      <categories>
          
          <category> 面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板字符串的简单实现</title>
      <link href="/wangq1231/2021/11/18/%E2%94%80%D0%B3%E2%96%91%D1%85%E2%95%AB%E2%95%93%E2%95%96%E2%88%9A%E2%94%A4%D0%BE%E2%95%9D%D0%84%E2%95%A1%D0%B5%E2%95%A9%E2%95%A1%E2%95%A7%E2%95%93/"/>
      <url>/wangq1231/2021/11/18/%E2%94%80%D0%B3%E2%96%91%D1%85%E2%95%AB%E2%95%93%E2%95%96%E2%88%9A%E2%94%A4%D0%BE%E2%95%9D%D0%84%E2%95%A1%D0%B5%E2%95%A9%E2%95%A1%E2%95%A7%E2%95%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><blockquote><p>由于前不久遇到一个前端笔试题，实现一个简易的模板渲染函数，但是没能做出来，于是在此进行总结记录。</p></blockquote><p>题目大致内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个简易模板渲染</span></span><br><span class="line"><span class="comment">// 例 renderTpl(&#x27;我已经有$&#123;year&#125;年$&#123;pos&#125;开发经验了&#x27;, &#123;year: &#x27;2&#x27;, pos: &#x27;前端&#x27;&#125;)  输出 &#x27;我已经有2年前端开发经验了&#x27;</span></span><br></pre></td></tr></table></figure><p>使用过<code>ES6</code>的模板字符串语法的人都知道，可以使用<code>$&#123;&#125;</code>将变量包起来，替代原来<code>ES5</code>的<code>+</code>拼接字符串。这个函数要实现的功能正是如此。</p><p>因为是使用<code>$&#123;&#125;</code>这种特定的语法，我们很容易想到，使用正则将<code>$&#123;&#125;</code>里面的内容替换出来，填充我们定义的变量进去即可。这里使用到字符串的<code>replace</code>方法：(更多replace内容<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace">点这里</a>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模板字符串的实现函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>str 要匹配的字符串 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>obj 要替换的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderTpl</span>(<span class="params">str, obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 该正则用来匹配 $&#123;&#125; 里的内容</span></span><br><span class="line">  <span class="keyword">const</span> regex = <span class="regexp">/\$\&#123;([^&#125;]+)\&#125;/g</span></span><br><span class="line">  <span class="comment">// 该函数用来替换第一个参数`match`匹配到的结果，返回值就是替换后的结果</span></span><br><span class="line">  <span class="keyword">const</span> replacer = <span class="function"><span class="keyword">function</span> (<span class="params">match, item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(match, item);</span><br><span class="line">    <span class="keyword">return</span> obj[item]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回替换函数执行后的结果</span></span><br><span class="line">  <span class="keyword">return</span> str.replace(regex, replacer)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里的打印语句会打印出</span></span><br><span class="line"><span class="comment">// $&#123;year&#125; year</span></span><br><span class="line"><span class="comment">// $&#123;pos&#125; pos</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> renderStr = renderTpl(<span class="string">&quot;我已经有$&#123;year&#125;年$&#123;pos&#125;开发经验了&quot;</span>, &#123; <span class="attr">year</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">pos</span>: <span class="string">&#x27;前端&#x27;</span> &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(renderStr)  <span class="comment">// 打印结果： &quot;我已经有2年前端开发经验了&quot;</span></span><br></pre></td></tr></table></figure><p>实现这个函数的主要难点我认为是正则表达式的书写，对正则表达式不是很熟悉的话，真的很难…</p><p>该正则进行拆分：</p><p><code>/\$\&#123;([^&#125;]+)\&#125;/g</code></p><ol><li>首先是g后缀，表示全局匹配，不会匹配到一个就结束</li><li>前面的<code>\$</code>和<code>\&#123;</code>表示转义，进行匹配<code>$&#123;</code></li><li>匹配到<code>$&#123;</code>后，接下来这一串<code>([^&#125;]+)</code>表示匹配<strong>一个或多个非<code>&#125;</code>的字符</strong></li><li>最后匹配<code>\&#125;</code>， 匹配右花括号</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EventEmitter简单实现</title>
      <link href="/wangq1231/2021/11/13/eventEmitter%E2%95%9D%D0%84%E2%95%A1%D0%B5%E2%95%A9%E2%95%A1%E2%95%A7%E2%95%93/"/>
      <url>/wangq1231/2021/11/13/eventEmitter%E2%95%9D%D0%84%E2%95%A1%D0%B5%E2%95%A9%E2%95%A1%E2%95%A7%E2%95%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><br><blockquote><p>由于前不久做某厂的前端笔试题，遇到这道题没能实现出来，于是在此进行总结记录。</p></blockquote><p><code>EventEmitter</code>是<code>Node.js</code>中提供的一个监听器类，类似于前端<code>vue</code>中的<code>eventBus</code>事件总线。</p><p>其原理主要是发布订阅者模式。</p><p> 用订阅杂志进行类比，所有的杂志就是一个大对象： <strong><code>events: &#123;&#125;</code></strong></p><ul><li><p> 意林是其中一款杂志，那么意林就是events对象中的一个属性，值为数组（因为订阅意林杂志的人可以不止一个）:  <strong><code>events: &#123;&#39;意林&#39;: []&#125;</code></strong></p></li><li><p> 当我订阅意林，那么我就应该收入倒意林数组中，让意林知道我订阅了它: <strong><code>events: &#123;&#39;意林&#39;: [&#39;我&#39;]&#125;</code></strong> <strong>(这里’我’是执行函数)</strong></p></li><li><p> 最后，当意林发布了新一期杂志时，那么我就会收到这一期杂志，<strong>也就是意林对数组中的’我’进行了执行</strong>。</p></li><li><p> 当我觉得意林不好看了，那我就会取消订阅，于是乎<strong>在意林数组中将我移除即可</strong>。</p></li><li><p>如果我只想看下一期的意林，下下一期的意林我不想看了，那么我就进行单次订阅即可。（使用once方法）</p><p> 下面这个<code>EventEmitter</code>类进行了简单实现，主要实现 ‘on’、’emit’、’once’和’remove’四个方法</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化事件对象</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.events = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 事件监听，监听的过程就是订阅，也就是把订阅者收集起来</span></span><br><span class="line">  <span class="function"><span class="title">on</span>(<span class="params">eventName, callback</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果不存在该事件，则进行数组初始化</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.events[eventName]) &#123;</span><br><span class="line">      <span class="built_in">this</span>.events[eventName] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存在对应的数组继续订阅收集，则把事件推入收集数组</span></span><br><span class="line">    <span class="built_in">this</span>.events[eventName].push(callback)</span><br><span class="line">    <span class="comment">// 返回自身 方便链式调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 事件触发，触发的过程就是发布，也就是通知订阅者</span></span><br><span class="line">  <span class="function"><span class="title">emit</span>(<span class="params">eventName, ...args</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 不存在该事件，则不触发</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.events[eventName]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存在则对收集的订阅者一一通知(函数一一执行)</span></span><br><span class="line">    <span class="keyword">const</span> fns = <span class="built_in">this</span>.events[eventName]</span><br><span class="line">    <span class="comment">// 执行的时候绑定自身this</span></span><br><span class="line">    fns.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn.apply(<span class="built_in">this</span>, args))</span><br><span class="line">    <span class="comment">// 返回自身 方便链式调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解绑事件，取消订阅，将订阅者从订阅者数组中移除</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">eventName, callback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.events[eventName]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有指定解绑事件? 就是没有指定对应的订阅者，那么移除所有订阅者</span></span><br><span class="line">    <span class="keyword">if</span> (!callback) &#123;</span><br><span class="line">      <span class="built_in">this</span>.events[eventName] = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 否则找到该事件, 就是对应的订阅者，将其移除</span></span><br><span class="line">    <span class="keyword">const</span> index = <span class="built_in">this</span>.events[eventName].indexOf(callback);</span><br><span class="line">    <span class="built_in">this</span>.events[eventName].splice(index, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 单次绑定事件,执行完后解绑</span></span><br><span class="line">  <span class="function"><span class="title">once</span>(<span class="params">eventName, callback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> only = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      callback.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      <span class="built_in">this</span>.remove(eventName, only);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.on(eventName, only);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emt = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"><span class="comment">// 订阅者1</span></span><br><span class="line"><span class="keyword">const</span> listener1 = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;意林的第一个订阅者&#x27;</span>, ...args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 订阅者2</span></span><br><span class="line"><span class="keyword">const</span> listener2 = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;意林的第二个订阅者&#x27;</span>, ...args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 收集订阅者，将杂志命名为&#x27;yilin&#x27;</span></span><br><span class="line">emt.on(<span class="string">&#x27;yilin&#x27;</span>, listener1)</span><br><span class="line">emt.on(<span class="string">&#x27;yilin&#x27;</span>, listener2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 500ms后订阅者1不想要该杂志了，进行取消订阅</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  emt.remove(<span class="string">&#x27;yilin&#x27;</span>, listener1)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1秒后意林杂志更新了，进行发布，通知订阅者，这时由于订阅者1取消订阅了，所以订阅者1就不会执行了</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  emt.emit(<span class="string">&#x27;yilin&#x27;</span>, <span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果为：1s后打印 `意林的第二个订阅者 hello world`</span></span><br></pre></td></tr></table></figure><p>以上只是简单实现，如果有不正确的地方，还请各位大佬指正😀</p>]]></content>
      
      
      <categories>
          
          <category> 面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css实现文本超出显示省略号</title>
      <link href="/wangq1231/2021/11/09/%E2%95%A9%E2%95%A1%E2%95%A7%E2%95%93%E2%95%AC%E2%94%80%E2%96%92%E2%95%9B%E2%94%82%D0%BC%E2%94%82%D0%8E%E2%95%A7%E2%95%98%E2%95%A9%E2%95%9B%E2%95%A9%D0%B1%E2%94%AC%E2%95%98%E2%95%91%E2%94%BC/"/>
      <url>/wangq1231/2021/11/09/%E2%95%A9%E2%95%A1%E2%95%A7%E2%95%93%E2%95%AC%E2%94%80%E2%96%92%E2%95%9B%E2%94%82%D0%BC%E2%94%82%D0%8E%E2%95%A7%E2%95%98%E2%95%A9%E2%95%9B%E2%95%A9%D0%B1%E2%94%AC%E2%95%98%E2%95%91%E2%94%BC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><h3 id="一、实现单行文本省略"><a href="#一、实现单行文本省略" class="headerlink" title="一、实现单行文本省略"></a>一、实现单行文本省略</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 原理：设置文字不换行，溢出后隐藏，截断显示省略符 */</span></span><br><span class="line"><span class="selector-class">.ellipsis</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;ellipsis&quot;&gt;Lorem ipsum dolor sit amet, brute idque noster at nam. Et vix case.&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure><p> <a href="https://codepen.io/he-huang-the-vuer/pen/eYEKLXO">查看示例</a></p><h3 id="二、多行文本省略"><a href="#二、多行文本省略" class="headerlink" title="二、多行文本省略"></a>二、多行文本省略</h3><h4 id="1-使用line-clamp属性"><a href="#1-使用line-clamp属性" class="headerlink" title="1. 使用line-clamp属性"></a>1. 使用<code>line-clamp</code>属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 原理：设置特定的display，使用-webkit-line-clamp属性设置溢出的行数，溢出后隐藏 */</span></span><br><span class="line"><span class="selector-class">.ellipsis</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;ellipsis&quot;&gt;Lorem ipsum dolor sit amet, brute idque noster at nam. Et vix case<span class="selector-class">.Lorem</span> ipsum dolor sit amet, brute idque noster at nam. Et vix case.&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure><p><a href="https://codepen.io/he-huang-the-vuer/pen/eYEKLXO">line-clamp示例</a></p><p>该属性带有<code>webkit</code>前缀，多少肯定有些兼容问题。</p><p><img src= "/wangq1231/img/loading.gif" data-lazy-src="/assets/blogImg/line-clamp.png" alt="image-20211112201944238"></p>]]></content>
      
      
      <categories>
          
          <category> 面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题解决方案</title>
      <link href="/wangq1231/2021/10/28/%E2%94%90%D1%87%E2%95%99%D0%84%E2%95%AC%E2%95%A9%E2%95%A0%D1%82%E2%95%9C%D1%82%E2%95%9B%D0%8E%E2%95%96%E2%95%9C%E2%96%91%E2%95%95/"/>
      <url>/wangq1231/2021/10/28/%E2%94%90%D1%87%E2%95%99%D0%84%E2%95%AC%E2%95%A9%E2%95%A0%D1%82%E2%95%9C%D1%82%E2%95%9B%D0%8E%E2%95%96%E2%95%9C%E2%96%91%E2%95%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><h3 id="同源策略："><a href="#同源策略：" class="headerlink" title="同源策略："></a>同源策略：</h3><ul><li>协议相同（protocol）</li><li>主机相同（host）</li><li>端口相同（port）</li></ul><p>如果不满足同源策略的网络请求就形成了跨域。</p><h3 id="一-解决方案之-jsonp："><a href="#一-解决方案之-jsonp：" class="headerlink" title="一.解决方案之 jsonp："></a>一.解决方案之 jsonp：</h3><p>前端代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">showJsonp = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(obj)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 回调函数拼在请求参数中</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;http://localhost:3030/getTodoJsonp?callback=showJsonp&#x27;</span></span><br><span class="line"><span class="comment">// 利用script标签的src属性发起请求，解决跨域的问题，但仅限于get请求</span></span><br><span class="line"><span class="keyword">const</span> scriptEle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">scriptEle.setAttribute(<span class="string">&#x27;src&#x27;</span>, url)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(scriptEle)</span><br><span class="line">scriptEle.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">document</span>.body.removeChild(scriptEle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端代码(Node Express框架)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理jsonp请求，解决跨域问题</span></span><br><span class="line">app.get(<span class="string">&#x27;/getTodoJsonp&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> callback = req.query.callback</span><br><span class="line">  <span class="keyword">let</span> content = callback + <span class="string">&quot;(&#123;&#x27;message&#x27;:&#x27;测试数据&#x27;&#125;)&quot;</span></span><br><span class="line">  res.send(content)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>页面打印：<code>&#123;message: &quot;测试数据&quot;&#125;</code></p><h3 id="二-解决方案之CORS："><a href="#二-解决方案之CORS：" class="headerlink" title="二.解决方案之CORS："></a>二.解决方案之CORS：</h3><p>CORS （Cross-Origin Resource Sharing，跨域资源共享）是一个系统，它由一系列传输的HTTP头组成，这些HTTP头决定浏览器是否阻止前端 JavaScript 代码获取跨域请求的响应</p><p><code>CORS</code> 实现起来非常方便，只需要增加一些 <code>HTTP</code> 头，让服务器能声明允许的访问来源</p><p>只要后端实现了 <code>CORS</code>，就实现了跨域</p><p>后端代码栗子(Node Express框架)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置允许跨域请求</span></span><br><span class="line">app.all(<span class="string">&#x27;*&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Origin, X-Requested-With, Content-Type, Accept&#x27;</span>)</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;PUT,POST,GET,DELETE,OPTIONS&#x27;</span>)</span><br><span class="line">  res.header(<span class="string">&#x27;X-Powered-By&#x27;</span>, <span class="string">&#x27;3.2.1&#x27;</span>)</span><br><span class="line">  res.header(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>*<em><code>Access-Control-Allow-Origin</code> 设置为</em>其实意义不大，可以说是形同虚设，实际应用中，上线前我们会将<code>Access-Control-Allow-Origin</code> 值设为我们目标<code>host</code>**</p><h3 id="三-解决方案之Websocket："><a href="#三-解决方案之Websocket：" class="headerlink" title="三.解决方案之Websocket："></a>三.解决方案之Websocket：</h3><p>Websocket 是 HTML5 的一个持久化的协议，它<strong>实现了浏览器与服务器的全双工通信</strong>，同时也是跨域的一种解决方案。什么是全双工通信 ？简单来说，<strong>就是在建立连接之后，server 与 client 都能主动向对方发送或接收数据</strong>。我们这里以第三方库 <strong>ws</strong> 为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://www.host.com/path&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ws.send(<span class="string">&#x27;something&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">incoming</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><p>需要注意的是，Websocket 属于长连接，在一个页面建立多个 Websocket 连接可能会导致性能问题。</p><h3 id="四-解决方案之Proxy："><a href="#四-解决方案之Proxy：" class="headerlink" title="四. 解决方案之Proxy："></a>四. 解决方案之Proxy：</h3><p>代理（Proxy）也称网络代理，是一种特殊的网络服务，允许一个（一般为客户端）通过这个服务与另一个网络终端（一般为服务器）进行非直接的连接。一些网关、路由器等网络设备具备网络代理功能。一般认为代理服务有利于保障网络终端的隐私或安全，防止攻击</p><ol><li>vue项目开发过程可以配置vue.config.js文件来设置代理允许跨域。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,<span class="comment">// vue项目启动时自动打开浏览器</span></span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123; <span class="comment">// &#x27;/api&#x27;是代理标识，用于告诉node，url前面是/api的就是使用代理的</span></span><br><span class="line">                <span class="attr">target</span>: <span class="string">&quot;http://localhost:3030&quot;</span>, <span class="comment">//目标地址，一般是指后台服务器地址</span></span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//是否跨域</span></span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123; <span class="comment">// pathRewrite 的作用是把实际Request Url中的&#x27;/api&#x27;用&quot;&quot;代替</span></span><br><span class="line">                    <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&quot;&quot;</span> </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios发送请求中配置请求的根路径</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;/api&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>服务端实现代理请求转发</li></ol><p>以express框架为例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(express.static(__dirname + <span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">app.use(<span class="string">&#x27;/api&#x27;</span>, proxy(&#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&#x27;http://localhost:4000&#x27;</span>, </span><br><span class="line">  <span class="attr">changeOrigin</span>: <span class="literal">false</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="built_in">module</span>.exports = app</span><br></pre></td></tr></table></figure><ol start="3"><li>通过配置<code>nginx</code>实现代理(一般用于生产环境中)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 8088;</span><br><span class="line">server_name 127.0.0.1; # 主机名</span><br><span class="line">gzip on;  # 开启gzip压缩功能</span><br><span class="line">gzip_min_length  1024; #设置最小压缩大小，单位字节</span><br><span class="line">gzip_types text/plain application/x-javascript text/css application/xml; #用来指定压缩的类型，“text/html”类型总是会被压缩。</span><br><span class="line">location / &#123;</span><br><span class="line">root /home/exam/dist;</span><br><span class="line">index index.html index.htm;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加请求头</span></span><br><span class="line">      add_header &#x27;Access-Control-Allow-Origin&#x27; *;</span><br><span class="line">      add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br><span class="line">      add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">      add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /api &#123;</span><br><span class="line">include uwsgi_params;</span><br><span class="line">      # 代理请求路径</span><br><span class="line">proxy_pass http://127.0.0.1:3033/api;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技能提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端下载二进制流文件</title>
      <link href="/wangq1231/2021/10/11/%E2%95%9F%E2%96%91%E2%95%A2%E2%95%A6%E2%95%A7%E2%94%AC%E2%95%98%E2%95%AA%E2%95%A2%E2%96%A0%E2%95%9C%C2%B0%E2%95%93%E2%95%9E%E2%94%B4%D1%9E%E2%95%AC%E2%94%80%E2%95%9D%E2%96%A0/"/>
      <url>/wangq1231/2021/10/11/%E2%95%9F%E2%96%91%E2%95%A2%E2%95%A6%E2%95%A7%E2%94%AC%E2%95%98%E2%95%AA%E2%95%A2%E2%96%A0%E2%95%9C%C2%B0%E2%95%93%E2%95%9E%E2%94%B4%D1%9E%E2%95%AC%E2%94%80%E2%95%9D%E2%96%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><blockquote><p>前后端对接时，后端常有返回二进制流文件的情况，前端需要下载或预览(pdf、html、图片文件等)。下面介绍几种实现前端获取二进制流并下载或预览的方式</p></blockquote><h3 id="1-直接预览二进制流文件"><a href="#1-直接预览二进制流文件" class="headerlink" title="1.直接预览二进制流文件"></a>1.直接预览二进制流文件</h3><p>如果返回的二进制流是一个pdf文件或图片文件。那么可以通过打开新标签页的方式进行文件预览。例如请求如下接口<code>https://via.placeholder.com/150/24f355</code>，返回一个图片文件，前端可以使用<code>window.open(&quot;https://via.placeholder.com/150/24f355&quot;)</code>来打开新标签页实现预览。<br>当然这种情况是接口并没有做其他处理，如果接口需要验证<code>token</code>请求头使用<code>window.open</code>是无法设置请求头的。下面会介绍如何解决需要<code>token</code>的情况</p><h3 id="2-使用Blob对象实现下载"><a href="#2-使用Blob对象实现下载" class="headerlink" title="2.使用Blob对象实现下载"></a>2.使用Blob对象实现下载</h3><p>使用Blob对象实现下载主要分为以下几步：</p><ol><li>设置接口请求的<code>responseType</code>值为<code>&#39;Blob&#39;</code></li><li>创建Blob对象<code>const blob = new Blob([data])</code></li><li>创建一个不显示的a标签，点击下载按钮时实际跳转a标签的地址，完成下载<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)     <span class="comment">// 创建a标签</span></span><br><span class="line">link.download = <span class="string">&#x27;文件名称.后缀名&#x27;</span>              <span class="comment">// 设置下载的文件名称</span></span><br><span class="line">link.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">link.href = <span class="built_in">window</span>.URL.createObjectURL(blob) <span class="comment">// 创建Blob对象的URL赋值给a标签</span></span><br><span class="line">link.target = <span class="string">&#x27;blank&#x27;</span></span><br><span class="line"><span class="built_in">document</span>.body.append(link) <span class="comment">// 将a标签添加到页面中</span></span><br><span class="line">link.click() <span class="comment">// 点击a标签实现下载</span></span><br></pre></td></tr></table></figure></li><li>释放URL对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.URL.revokeObjectURL(link.href)</span><br><span class="line"><span class="built_in">document</span>.body.removeChild(link)</span><br></pre></td></tr></table></figure>下面就是一个具体的例子<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>blob下载文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;blobDown&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;blobDown&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      axios.get(<span class="string">&#x27;https://img1.baidu.com/it/u=2921118138,3990044703&amp;fm=26&amp;fmt=auto&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(res.data);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([res.data])</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        link.download = <span class="string">&#x27;王冰冰.jpg&#x27;</span></span></span><br><span class="line"><span class="javascript">        link.style.display = <span class="string">&#x27;none&#x27;</span></span></span><br><span class="line"><span class="javascript">        link.href = <span class="built_in">window</span>.URL.createObjectURL(blob)</span></span><br><span class="line"><span class="javascript">        link.target = <span class="string">&#x27;blank&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.append(link)</span></span><br><span class="line"><span class="javascript">        link.click()</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-对blob下载二进制文件流的方法进行抽离"><a href="#3-对blob下载二进制文件流的方法进行抽离" class="headerlink" title="3.对blob下载二进制文件流的方法进行抽离"></a>3.对blob下载二进制文件流的方法进行抽离</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>data blod文件流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>fileName 下载后的文件名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadBlob</span>(<span class="params">data, fileName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([data])</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;download&#x27;</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 非IE下载</span></span><br><span class="line">    <span class="keyword">const</span> elink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    elink.download = fileName</span><br><span class="line">    elink.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    elink.href = URL.createObjectURL(blob)</span><br><span class="line">    elink.target = <span class="string">&#x27;blank&#x27;</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(elink)</span><br><span class="line">    elink.click()</span><br><span class="line">    URL.revokeObjectURL(elink.href) <span class="comment">// 释放URL 对象</span></span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(elink)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// IE10+下载</span></span><br><span class="line">    navigator.msSaveBlob(blob, fileName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-解决window-open无法预览需要请求头的接口返回的二进制流"><a href="#4-解决window-open无法预览需要请求头的接口返回的二进制流" class="headerlink" title="4. 解决window.open无法预览需要请求头的接口返回的二进制流"></a>4. 解决window.open无法预览需要请求头的接口返回的二进制流</h3><p>实际开发中，后端的接口都会需要用户验证，通常是放在请求头某个参数或具体的请求参数中。<br>如果在请求头中，那么window.open预览文件流则无法配置请求头，这时可以用blob解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">&#x27;https://img1.baidu.com/it/u=2921118138,3990044703&amp;fm=26&amp;fmt=auto&#x27;</span>, &#123;</span><br><span class="line"> <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>,</span><br><span class="line"> <span class="attr">headers</span>: &#123;<span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;tokenInfo&#x27;</span>&#125; <span class="comment">// 这里设置对应的请求头</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.data);</span><br><span class="line">  <span class="comment">// 创建Blob对象的时候，设置指定的文件格式。如果是pdf则设置 &#x27;type: &quot;application/pdf&quot;&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([res.data], &#123;<span class="attr">type</span>: <span class="string">&#x27;image/jpeg&#x27;</span>&#125;)  </span><br><span class="line">  <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  link.href = <span class="built_in">window</span>.URL.createObjectURL(blob)</span><br><span class="line"> link.target = <span class="string">&#x27;blank&#x27;</span></span><br><span class="line">  link.click()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更多Blob相关信息可以查看：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob">Blob MDN</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题之手写原理</title>
      <link href="/wangq1231/2021/09/03/%E2%95%9F%E2%96%91%E2%95%A2%E2%95%A6%E2%94%9C%D1%86%E2%95%A9%E2%95%98%E2%95%A0%D1%82%E2%95%93%D0%BE%E2%95%A9%E2%95%93%E2%95%A8%E2%94%A4%E2%95%98%D0%BD%E2%94%94%D1%8D/"/>
      <url>/wangq1231/2021/09/03/%E2%95%9F%E2%96%91%E2%95%A2%E2%95%A6%E2%94%9C%D1%86%E2%95%A9%E2%95%98%E2%95%A0%D1%82%E2%95%93%D0%BE%E2%95%A9%E2%95%93%E2%95%A8%E2%94%A4%E2%95%98%D0%BD%E2%94%94%D1%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>前端开发中原生JS的理解一定要足够透彻，这篇文章主要介绍面试过程中可能会出现的实现JS中的关键字或一些特殊方法的原理题。由于经常看了就忘，于是在此做下记录。</p></blockquote><h2 id="实现new关键字"><a href="#实现new关键字" class="headerlink" title="实现new关键字"></a>实现<code>new</code>关键字</h2><p>要实现new方法的原理，首先要知道new操作符具体干了什么</p><ul><li>在js中，new操作符用于创建一个给定构造函数的实例对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义构造函数Person</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> Person(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person1)  <span class="comment">// Person &#123;name: &quot;Tom&quot;, age: 20&#125;</span></span><br><span class="line">t.sayName() <span class="comment">// &#x27;Tom&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>注：如果构造函数中存在返回值</strong></p><ol><li>返回值为基本数据类型，那么new创建的实例对象不会受返回值的结果影响。</li><li>返回值为引用数据类型(对象、数组)，那么new创建的实例对象就是返回的数据结果。如下所示</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// Test &#123; name: &#x27;xxx&#x27; &#125;</span></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">age</span>: <span class="number">26</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> t = <span class="keyword">new</span> Test(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(t) <span class="comment">// &#123; age: 26 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(t.name) <span class="comment">// &#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><p>new关键字实现创建对象的步骤：</p><ol><li><strong>创建一个空的实例对象 =&gt; obj</strong></li><li><strong>将实例对象与构造函数通过原型连接起来 =&gt; <code>obj.__proto__ === 构造函数.prototype</code></strong> </li><li><strong>将构造函数中的this绑定到实例对象obj上 =&gt; <code>构造函数.apply(obj, 参数)</code></strong></li><li><strong>判断构造函数的返回值类型；如果返回引用类型那么空对象赋值为构造函数返回结果，否则返回该对象。</strong></li></ol></li><li><p>实现代码如下:</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实现new的功能</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>Func 构造函数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@params </span>args 构造函数的参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">Func, ...args</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">  obj.__proto__ = Func.prototype</span><br><span class="line">  <span class="keyword">let</span> result = Func.apply(obj, args)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> ? result : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试函数的功能</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hi, I&#x27;m&quot;</span>, <span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> lisi = myNew(Person, <span class="string">&#x27;李四&#x27;</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(lisi) <span class="comment">// Person &#123;name: &quot;李四&quot;, age: 100&#125;</span></span><br><span class="line">lisi.sayHi() <span class="comment">// Hi, I&#x27;m 李四</span></span><br></pre></td></tr></table></figure><h2 id="call、apply、bind的实现"><a href="#call、apply、bind的实现" class="headerlink" title="call、apply、bind的实现"></a><code>call</code>、<code>apply</code>、<code>bind</code>的实现</h2><p>先说明以下三者的用途和区别</p><ul><li><strong>三者都可以改变函数的this对象指向</strong></li><li><strong>三者第一个参数都是this要指向的对象，如果如果没有这个参数或参数为undefined或null，则默认指向全局window</strong></li><li><strong>三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入</strong></li><li><strong>bind执行后是返回绑定this之后的函数，apply、call 则是立即执行</strong></li></ul><p>使用方式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fn函数的this&#x27;</span>, <span class="built_in">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fn函数的参数&#x27;</span>, args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;------------fn------------&#x27;</span>)</span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 1、使用apply改变this指向，第二个参数必须是数组。</span></span><br><span class="line"><span class="comment">// func.apply(thisArg, [argsArray])</span></span><br><span class="line"><span class="comment">// fn.apply(obj, 1, 2, 3) // 这样使用apply会报以下错误：CreateListFromArrayLike called on non-object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;------------fn.apply------------&#x27;</span>)</span><br><span class="line">fn.apply(obj, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// 2、使用call改变this指向，后面的参数为参数列表，而不是数组，传递数组的话，只会给第一个参数赋值</span></span><br><span class="line"><span class="comment">// function.call(thisArg, arg1, arg2, ...)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;------------fn.call------------&#x27;</span>)</span><br><span class="line">fn.call(obj, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 3、使用bind改变this指向</span></span><br><span class="line"><span class="comment">// function.bind(thisArg[, arg1[, arg2[, ...]]])</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;------------fn.bind------------&#x27;</span>)</span><br><span class="line">fn.bind(obj, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// bind改变this不会立即执行，控制台并没有输出</span></span><br><span class="line"><span class="comment">// bind会有一个返回值，返回一个原函数的拷贝，并拥有指定的 this 值和初始参数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;------------fn.bind返回值------------&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bindReturn = fn.bind(obj, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 执行这个bind的返回值，就会在控制台进行输出</span></span><br><span class="line">bindReturn()</span><br></pre></td></tr></table></figure><p><strong>实现call、apply和bind方法：</strong></p><ul><li><p>call方法的实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;foo函数的this&#x27;</span>, <span class="built_in">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;foo函数的参数&#x27;</span>, args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用call方法改变this</span></span><br><span class="line">foo.call(obj, <span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>) <span class="comment">// foo函数的this &#123;a: 1, b: 2&#125; // foo函数的参数 [1, 2, 3]</span></span><br><span class="line"><span class="comment">// 想要实现call方法，从对象下手，想象使用call方法后调用的是如下的obj.foo()方法</span></span><br><span class="line">obj = &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;foo函数的this&#x27;</span>, <span class="built_in">this</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;foo函数的参数&#x27;</span>, args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 于是可以实现call方法如下</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 获取参数  </span></span><br><span class="line">  <span class="keyword">const</span> context = [...arguments].slice(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> rest = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">if</span> (!context) &#123;</span><br><span class="line">    <span class="comment">//context为null或者是undefined</span></span><br><span class="line">    context = <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">&#x27;undefined&#x27;</span> ? <span class="built_in">global</span> : <span class="built_in">window</span></span><br><span class="line">  &#125;</span><br><span class="line">context.fn = <span class="built_in">this</span> <span class="comment">// 向参数对象中添加一个fn属性，表示当前调用call方法的方法，就像上面的obj对象添加的foo方法</span></span><br><span class="line">  <span class="keyword">let</span> result = context.fn(...rest) <span class="comment">// 调用当前方法传入剩余参数</span></span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result <span class="comment">// call方法是立即执行，所以返回执行结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>apply方法的实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply方法的实现与call方法类似，只是剩余参数的传递不是参数列表而是数组</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">context, args</span>) </span>&#123; <span class="comment">// apply中第二个参数为类数组</span></span><br><span class="line">  <span class="keyword">if</span> (!context) &#123;</span><br><span class="line">    <span class="comment">//context为null或者是undefined</span></span><br><span class="line">    context = <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">&#x27;undefined&#x27;</span> ? <span class="built_in">global</span> : <span class="built_in">window</span></span><br><span class="line">  &#125;</span><br><span class="line">  context.fn = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">let</span> result = args == <span class="literal">undefined</span> ? context.fn(args) : context.fn(...args) <span class="comment">// 调用当前方法传入剩余参数</span></span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result <span class="comment">// apply方法是立即执行，所以返回执行结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>bind方法的实现 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> _self = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">const</span> args = [...arguments].slice(<span class="number">1</span>) <span class="comment">// 剩余参数，一个数组</span></span><br><span class="line">  <span class="keyword">const</span> Fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 定义一个空函数</span></span><br><span class="line">  Fn.prototype = <span class="built_in">this</span>.prototype <span class="comment">// 维护原型关系</span></span><br><span class="line"> <span class="comment">// bind返回一个函数</span></span><br><span class="line">  <span class="keyword">const</span> fnResult = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    对三目运算符两种情况的解释：</span></span><br><span class="line"><span class="comment">        1.当作为构造函数时，this 指向实例（注意！！！这里的this是bind返回的新方法里执行时的this，</span></span><br><span class="line"><span class="comment">        和上面的this不是一个！！！），Fn 为绑定函数，因为上面的 `Fn.prototype = this.prototype;`，</span></span><br><span class="line"><span class="comment">        已经修改了 Fn.prototype 为 绑定函数的 prototype，此时结果为 true，</span></span><br><span class="line"><span class="comment">        当结果为 true 的时候，this 指向实例。</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        2.当作为普通函数时，this 指向 window，Fn 为绑定函数，此时结果为 false，</span></span><br><span class="line"><span class="comment">        当结果为 false 的时候，this 指向绑定的 context。 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> _this = <span class="built_in">this</span> <span class="keyword">instanceof</span> _self ? <span class="built_in">this</span> : context</span><br><span class="line">    <span class="keyword">const</span> _args = [...args, ...arguments]</span><br><span class="line">    <span class="comment">// 且可以继续传参数，这里对参数进行拼接</span></span><br><span class="line">    <span class="keyword">return</span> _self.apply(_this, _args)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//原型链</span></span><br><span class="line">  fnResult.prototype = <span class="keyword">new</span> Fn()</span><br><span class="line">  <span class="keyword">return</span> fnResult</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="ajax请求通过JS实现"><a href="#ajax请求通过JS实现" class="headerlink" title="ajax请求通过JS实现"></a><code>ajax</code>请求通过JS实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建请求实例对象</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 2.建立服务器连接</span></span><br><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;url&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 3.发送数据</span></span><br><span class="line">xhr.send() <span class="comment">// get请求不发送，send是发送请求体的数据</span></span><br><span class="line"><span class="comment">// 4.监听请求的状态变化</span></span><br><span class="line">xhr.onreadyStateChange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 4表示请求完成</span></span><br><span class="line">  <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="comment">// 200状态码表示请求成功</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.status === <span class="number">200</span>)&#123;</span><br><span class="line">      ...处理成功的操作</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      ...处理失败的操作</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用XMLHttpRequest对象封装ajax方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象转url的参数字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objToParams</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> paramsStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.hasOwnProperty.call(obj, key)) &#123;</span><br><span class="line">      <span class="keyword">const</span> element = obj[key]</span><br><span class="line">      paramsStr.length &gt; <span class="number">0</span></span><br><span class="line">        ? (paramsStr = paramsStr + <span class="string">&#x27;&amp;&#x27;</span> + <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;element&#125;</span>`</span>)</span><br><span class="line">      : (paramsStr = <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;element&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> paramsStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化参数</span></span><br><span class="line">  request = request || &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> method = (request.method || <span class="string">&#x27;GET&#x27;</span>).toUpperCase()</span><br><span class="line">  <span class="keyword">const</span> url = request.url</span><br><span class="line">  <span class="keyword">const</span> params = <span class="built_in">JSON</span>.stringify(request.data)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.创建请求实例对象</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  <span class="comment">// 2.与服务器建立连接</span></span><br><span class="line">  <span class="comment">// 3.向服务器发送数据</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    xhr.open(method, url + <span class="string">&#x27;?&#x27;</span> + objToParams(params))</span><br><span class="line">    xhr.send()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// POST、DELETE、PUT请求等</span></span><br><span class="line">    xhr.open(method, url)</span><br><span class="line">    xhr.send(params)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4.监听请求状态</span></span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        request.success &amp;&amp; request.success(xhr.response)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.status &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">        request.fail &amp;&amp; request.fail(xhr.responseText)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用ajax</span></span><br><span class="line">ajax(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">`http://jsonplaceholder.typicode.com/posts`</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fail</span>: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="深拷贝与浅拷贝实现"><a href="#深拷贝与浅拷贝实现" class="headerlink" title="深拷贝与浅拷贝实现"></a>深拷贝与浅拷贝实现</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝。</p><p>浅拷贝实现的是拷贝对象的内存地址，改变拷贝对象的属性时，原对象属性也会随之改变。</p><p>实现代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newObj = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;</span><br><span class="line">      newObj[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>JavaScript</code>中，存在浅拷贝的现象有：</p><ul><li><code>Object.assign</code></li><li><code>Array.prototype.slice()</code>, <code>Array.prototype.concat()</code></li><li>使用拓展运算符实现的复制</li></ul><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性。</p><ul><li>深拷贝实现1： JSON.stringify()。存在缺陷：会忽略undefined、symbol和函数类型的数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone1</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line">   <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>深拷贝实现2： 循环递归</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone2</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> obj</span><br><span class="line">  <span class="keyword">let</span> newObj = <span class="keyword">new</span> obj.constructor() <span class="comment">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身，新开辟空间</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.hasOwnProperty.call(obj, key)) &#123;</span><br><span class="line">      <span class="comment">// 实现一个递归拷贝</span></span><br><span class="line">      newObj[key] = deepClone2(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="instanceof关键字的实现"><a href="#instanceof关键字的实现" class="headerlink" title="instanceof关键字的实现"></a><code>instanceof</code>关键字的实现</h2><ol><li><strong>instanceof的用法：</strong></li></ol><p>instanceof用于检测构造函数的prototype属性是否出现在某个实例对象的原型链上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义构建函数</span></span><br><span class="line"><span class="keyword">let</span> Car = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> benz = <span class="keyword">new</span> Car()</span><br><span class="line">benz <span class="keyword">instanceof</span> Car <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">car <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">str <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>实现instanceof的原理：</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现instanceof关键字的原理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Any&#125;</span> </span>left </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;constructor&#125;</span> </span>right </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="variable">Boolean</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instanceof2</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 如果left是基本数据类型或null，直接返回false  </span></span><br><span class="line">  <span class="keyword">if</span> (![<span class="string">&#x27;object&#x27;</span>, <span class="string">&#x27;function&#x27;</span>].includes(<span class="keyword">typeof</span> left) || left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">// Object.getPrototypeOf方法返回指定对象的原型（内部[[Prototype]]属性的值）</span></span><br><span class="line">  <span class="keyword">let</span> proto = <span class="built_in">Object</span>.getPrototypeOf(left)</span><br><span class="line">  <span class="keyword">while</span> (proto !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (proto === right.prototype) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    proto = <span class="built_in">Object</span>.getPrototypeOf(proto)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.getPrototypeOf拓展</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf([<span class="number">1</span>,<span class="number">2</span>]) === <span class="built_in">Array</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> prototype1 = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> object1 = <span class="built_in">Object</span>.create(prototype1)</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(object1) === prototype1  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf( <span class="built_in">Object</span> ) === <span class="built_in">Function</span>.prototype  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.getPrototypeOf( Object )是把Object这一构造函数看作对象，</span></span><br><span class="line"><span class="comment">// 返回的当然是函数对象的原型，也就是 Function.prototype。</span></span><br></pre></td></tr></table></figure><p><strong>拓展：结合typeof和instanceof精确判断某一个变量的数据类型</strong></p><ol start="3"><li><strong>实现通用的获取数据类型方法</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> type  = <span class="keyword">typeof</span> obj;</span><br><span class="line">  <span class="keyword">if</span> (type !== <span class="string">&quot;object&quot;</span>) &#123;    <span class="comment">// 先进行typeof判断，如果是基础数据类型，直接返回</span></span><br><span class="line">    <span class="keyword">return</span> type;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对于typeof返回结果是object的，再进行如下的判断，正则返回结果</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj).replace(<span class="regexp">/^\[object (\S+)\]$/</span>, <span class="string">&#x27;$1&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getType([])     <span class="comment">// &quot;Array&quot; typeof []是object，因此toString返回</span></span><br><span class="line">getType(<span class="string">&#x27;123&#x27;</span>)  <span class="comment">// &quot;string&quot; typeof 直接返回</span></span><br><span class="line">getType(<span class="built_in">window</span>) <span class="comment">// &quot;Window&quot; toString返回</span></span><br><span class="line">getType(<span class="literal">null</span>)   <span class="comment">// &quot;Null&quot;首字母大写，typeof null是object，需toString来判断</span></span><br><span class="line">getType(<span class="literal">undefined</span>)   <span class="comment">// &quot;undefined&quot; typeof 直接返回</span></span><br><span class="line">getType()            <span class="comment">// &quot;undefined&quot; typeof 直接返回</span></span><br><span class="line">getType(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) <span class="comment">// &quot;function&quot; typeof能判断，因此首字母小写</span></span><br><span class="line">getType(<span class="regexp">/123/g</span>)      <span class="comment">//&quot;RegExp&quot; toString返回</span></span><br></pre></td></tr></table></figure><h2 id="Promise实现原理"><a href="#Promise实现原理" class="headerlink" title="Promise实现原理"></a><code>Promise</code>实现原理</h2><h3 id="promise的使用"><a href="#promise的使用" class="headerlink" title="promise的使用"></a><code>promise</code>的使用</h3><ol><li><p><code>promise</code>对象一共只有三种状态：</p><p>1、<code>pending</code>；2、<code>fulfilled</code>；3、<code>rejected</code>。</p><p>状态只允许从<code>pending</code>变化成<code>fulfilled</code>或从<code>pending</code>变化成<code>rejected</code>，且状态一旦改变，就无法回退。</p></li><li><p>通过promise的构造函数可以创建一个异步方法实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>resolve</code>函数的作用是，将<code>Promise</code>对象的状态从“未完成”变为“成功”</li><li><code>reject</code>函数的作用是，将<code>Promise</code>对象的状态从“未完成”变为“失败”</li></ul><ol start="3"><li><p><code>promise</code>对象常用的方法有<code>then</code>、<code>catch</code>、<code>finally</code></p><p>这里主要介绍then方法的使用，在实现Promise的原理时也着重实现then方法：</p><p><code>then</code>是实例状态发生改变时的回调函数，第一个参数是<code>resolved</code>状态的回调函数，第二个参数是<code>rejected</code>状态的回调函数</p><p><code>then</code>方法返回的是一个新的<code>Promise</code>实例，也就是<code>promise</code>能链式书写的原因</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">&quot;/posts.json&quot;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> json.post;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="开始实现promise原理"><a href="#开始实现promise原理" class="headerlink" title="开始实现promise原理"></a>开始实现<code>promise</code>原理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span></span>&#123;</span><br><span class="line">  state = <span class="string">&#x27;pending&#x27;</span>    <span class="comment">// 定义状态</span></span><br><span class="line">  result = <span class="literal">undefined</span> <span class="comment">// 成功的结果</span></span><br><span class="line">  reason = <span class="literal">undefined</span> <span class="comment">// 失败的结果</span></span><br><span class="line">  handleResolved = [] <span class="comment">// 成功的回调函数</span></span><br><span class="line">  handleRejected = [] <span class="comment">// 失败的回调函数</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">execute</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">        <span class="built_in">this</span>.result = result</span><br><span class="line">        <span class="comment">// 回调函数数组中如果收集到对应的回调函数，那么在执行对应的改变状态函数时，就会执行回调函数</span></span><br><span class="line">        <span class="built_in">this</span>.handleResolved.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn &amp;&amp; fn(result))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">        <span class="built_in">this</span>.reason = reason</span><br><span class="line">        <span class="built_in">this</span>.handleRejected.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn &amp;&amp; fn(reason))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      execute(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">then</span>(<span class="params">onResolved, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      onResolved = <span class="function"><span class="params">data</span> =&gt;</span> data</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      onRejected = <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> newPromise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 异步操作，收集resolve和reject函数</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.handleResolved.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> returnResult = onResolved(<span class="built_in">this</span>.result)</span><br><span class="line">          <span class="comment">// 链式调用的关键函数</span></span><br><span class="line">          handleReturnPromise(returnResult, newPromise, resolve, reject)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.handleRejected.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> returnResult = onRejected(<span class="built_in">this</span>.reason)</span><br><span class="line">          <span class="comment">// 链式调用的关键函数</span></span><br><span class="line">          handleReturnPromise(returnResult, newPromise, resolve, reject)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 同步操作，直接执行对应的resolve和reject</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> returnResult = onResolved(<span class="built_in">this</span>.result)</span><br><span class="line">          <span class="comment">// 链式调用的关键函数</span></span><br><span class="line">          handleReturnPromise(returnResult, newPromise, resolve, reject)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> returnResult = onRejected(<span class="built_in">this</span>.reason)</span><br><span class="line">          <span class="comment">// 链式调用的关键函数</span></span><br><span class="line">          handleReturnPromise(returnResult, newPromise, resolve, reject)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> newPromise</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span> (onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用的关键函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleReturnPromise</span>(<span class="params">result, newPromise, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (result === newPromise) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;return oneself is not allowed&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> result === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> then = result.then;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      then.call(result, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        handleReturnPromise(res, newPromise, resolve, reject)</span><br><span class="line">      &#125;, <span class="function"><span class="params">rej</span> =&gt;</span> &#123;</span><br><span class="line">        reject(rej)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(result)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// return 的是基本类型数据直接resolve</span></span><br><span class="line">    resolve(result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证函数</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.then(<span class="function">(<span class="params">res, err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;第一层promise的返回值&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&#x27;第二层Promise的返回值，我在2秒后出现&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">// data</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 第一层promise的返回值</span></span><br><span class="line"><span class="comment">// 二层Promise的返回值，我在2秒后出现</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 前端面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目结构分析</title>
      <link href="/wangq1231/2021/09/02/vue%E2%95%A7%D1%8E%E2%94%80%E2%94%90%E2%95%9C%D1%81%E2%95%A3%E2%95%A3%E2%95%96%E2%95%93%E2%95%AC%D0%8E/"/>
      <url>/wangq1231/2021/09/02/vue%E2%95%A7%D1%8E%E2%94%80%E2%94%90%E2%95%9C%D1%81%E2%95%A3%E2%95%A3%E2%95%96%E2%95%93%E2%95%AC%D0%8E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>在我目前的工中很少自己动手搭建一个项目，所以对于开发开始前的项目搭建以及项目各项配置相对理解的不够透彻。这次需要开发一个运行在终端上(类似ATM机的操作)的售楼签约系统。由于 UI 的不适配决定从头开始创建一个新项目。于是在此对项目的创建和配置做一个总结</p></blockquote><ul><li><p>创建 vue 项目可以有多种方式，这里介绍脚手架创建方式</p><p>全局安装<code>vue-cli</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>创建一个项目:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 进到你希望项目放到的那个文件夹目录下，然后运行如下命令</span><br><span class="line">vue create XXX-XXX  (项目名称)</span><br></pre></td></tr></table></figure><p>运行完创建命令后会出现选择预设的选项，我这里选的是<code>manually select features</code>,然后选择了</p><p><code>Babel</code>、<code>Router</code>、<code>Vuex</code>、<code>CSS Pre-processors</code>、<code>Lint</code>这些插件，并选择在创建单独的文件用于配置这些插件。</p><p><strong>创建vue项目更多详细的内容可以访问 <a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">vue 脚手架创建项目</a></strong></p></li><li><p>项目创建完成后，默认的目录展示如下：</p><p><img src= "/wangq1231/img/loading.gif" data-lazy-src="/assets/blogImg/vue-structure.png" alt="vue结构"></p></li></ul><p>主要分析有以下这些文件，点击文件可快速定位文件的位置</p><ol><li><strong><a href="#browserslistrc">.browserslistrc</a></strong></li><li><strong><a href="#eslint">.eslintrc.js</a></strong></li><li><strong><a href="#gitignore">gitignore</a></strong></li><li><strong><a href="#readme">README.md</a></strong></li><li><strong><a href="#babel">babel.config.js</a></strong></li><li><strong><a href="#package">package.json</a></strong></li><li><strong><a href="#vueconfig">vue.config.js</a></strong></li><li><strong><a href="#envconfig">env配置环境变量文件</a></strong></li><li><strong><a href="#prettier">.prettierrc</a></strong></li></ol><h1 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h1><p>具体的<code>src</code>和<code>public</code>文件夹等，这里不做过多的介绍，主要介绍根目录下的相关配置文件的内容</p><h2 id="browserslistrc"><a href="#browserslistrc" class="headerlink" title=" .browserslistrc"></a><span id="browserslistrc"> .browserslistrc<span></h2><p>该文件的作用是根据提供的目标浏览器的环境，来智能添加 css 前缀，js 的 polyfill 垫片,来兼容旧版本浏览器。避免不必要的兼容代码，以提高代码的编译质量。</p><p>默认创建的项目中，<code>.browserslistrc</code>文件内容如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1<span class="comment">%</span></span><br><span class="line">last 2 versions</span><br><span class="line">not dead</span><br></pre></td></tr></table></figure><p>分别代表1.全球超过 1%人使用的浏览器；2.所有浏览器兼容到最后两个版本，再以前的就不兼容；3.不兼容已经在市面下架“死去”的浏览器。以下是更多相关的配置和介绍：</p><table><thead><tr><th>例子</th><th>说明</th></tr></thead><tbody><tr><td>&gt; 1%</td><td>全球超过 1%人使用的浏览器</td></tr><tr><td>&gt; 5% in US</td><td>指定国家使用率覆盖</td></tr><tr><td>last 2 versions</td><td>所有浏览器兼容到最后两个版本根据 CanIUse.com 追踪的版本</td></tr><tr><td>Firefox ESR</td><td>火狐最新版本</td></tr><tr><td>Firefox &gt; 20</td><td>指定浏览器的版本范围</td></tr><tr><td>not ie &lt;=8</td><td>方向排除部分版本</td></tr><tr><td>Firefox 12.1</td><td>指定浏览器的兼容到指定版本</td></tr><tr><td>unreleased versions</td><td>所有浏览器的 beta 测试版本</td></tr><tr><td>unreleased Chrome versions</td><td>指定浏览器的测试版本</td></tr><tr><td>since 2013</td><td>2013 年之后发布的所有版本</td></tr></tbody></table><h2 id="eslintrc-js"><a href="#eslintrc-js" class="headerlink" title=" .eslintrc.js"></a><span id="eslint"> .eslintrc.js</span></h2><p>这个文件主要用于配置项目的 eslint 校验，对于一个团队来说，每个人有每个人写代码的风格和习惯，有人喜欢结尾加分号，有人不加，有人习惯使用双引号，有人习惯单引号，当然这些不足以影响项目的运行，但是 eslint 还可以配置更加重要的规范，来统一代码风格和预防一些代码隐患。所以这个文件相对团队开发来说是比较重要的。</p><p><code>.eslintrc.js</code>文件默认导出一个对象，以下是创建 vue 项目后 eslintrc 文件的默认内容，结尾处会提供一个更详细的 eslint 配置文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 默认情况下，ESLint 会在所有父级目录里寻找配置文件，一直到根目录。ESLint 一旦发现配置文件中有 &quot;root&quot;: true，它就会停止在父级目录中寻找。</span></span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// env表示一个环境，预定义了一组全局变量</span></span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span> <span class="comment">// 定义了Node.js 全局变量和 Node.js 作用域。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// extends 一个配置文件可以被基础配置中的已启用的规则继承，如下设置继承了数组中的三项规则。其中值为 &quot;eslint:recommended&quot; 的 extends 属性会启用一系列eslint核心规则。</span></span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;plugin:vue/essential&#x27;</span>, <span class="string">&#x27;eslint:recommended&#x27;</span>, <span class="string">&#x27;@vue/prettier&#x27;</span>],</span><br><span class="line">  <span class="comment">// ESLint 允许你指定你想要支持的 JavaScript 语言选项。默认情况下，ESLint 支持 ECMAScript 5 语法。你可以覆盖该设置，以启用对 ECMAScript 其它版本和 JSX 的支持。</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;babel-eslint&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// rules 表示eslint校验规则</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>rules 配置规则格式</strong></p><p>规则格式是<code>&lt;规则名称&gt;: &lt;告警级别&gt;</code>，告警级别分为三种:</p><ul><li>“0”表示忽略问题，等同于”off”;</li><li>“1”表示给出警告，等同于”warn”;</li><li>“2”表示直接报错，等同于”error”。</li></ul><p><strong>更多的 ESLint 配置可以前往 <a href="https://eslint.bootcss.com/docs/user-guide/configuring">ESLint 中文网</a> 查看</strong></p><h2 id="gitignore"><a href="#gitignore" class="headerlink" title="  gitignore"></a><span id="gitignore">  gitignore</span></h2><p>该文件正如其名字的意思，告知 git 那些文件或文件夹不需要添加到版本管理中。内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules</span><br><span class="line">/dist</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">local</span> env files</span></span><br><span class="line">.env.local</span><br><span class="line">.env.*.local</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Log files</span></span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line">pnpm-debug.log*</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Editor directories and files</span></span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br><span class="line">*.sw?</span><br></pre></td></tr></table></figure><h2 id="README-md"><a href="#README-md" class="headerlink" title=" README.md"></a><span id="readme"> README.md</span></h2><p>这个文件就是项目的介绍文件，使用 markdown 语法。</p><p><strong>不清楚markdown语法的可以访问<a href="http://markdown.p2hp.com/basic-syntax/index.html">markdown基本语法</a></strong></p><h2 id="babel-config-js"><a href="#babel-config-js" class="headerlink" title=" babel.config.js"></a><span id="babel"> babel.config.js</span></h2><p>Babel 是一个 JavaScript 编译器，可以对 JavaScript 文件进行转码，类似的有 ES6 转为 ES5 兼容不同的浏览器。</p><p><code>babel.config.js</code>是 babel 的配置文件，<code>presets</code>字段设定转码规则，此处 <code>@vue/cli-plugin-babel/preset</code>就是规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>了解更多的Babel相关配置可以访问<a href="https://babel.docschina.org/docs/en/config-files/#project-wide-configuration">Babel 配置文件</a></strong></p><h2 id="package-json"><a href="#package-json" class="headerlink" title=" package.json"></a><span id="package"> package.json</span></h2><p><code>package.json</code>文件提供了很多项目相关的信息，主要有这个项目所需要的各种模块；以及项目的配置信息（比如名称、版本、许可证等元数据）；还可以配置一些简化<code>script</code>执行脚本。项目中json文件是不能添加注释的，需要删除相关注释噢</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;vue-project&quot;</span>, <span class="comment">// 项目的名称</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.1.0&quot;</span>, <span class="comment">// 项目的版本号  大版本号.小版本号.修订版本号[.日期版本号]</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>, <span class="comment">// 是否对外开发，private为true表示不对外开放</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// script配置脚本对象，表示npm run XXX</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>, <span class="comment">// 配置serve脚本，表示npm run serve 等同于 vue-cli-service serve 命令</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// 依赖的相关信息，这里主要是生产和开发依赖,一般用npm install XXX --save 安装的依赖就会添加到这里</span></span><br><span class="line">    <span class="attr">&quot;core-js&quot;</span>: <span class="string">&quot;^3.6.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue&quot;</span>: <span class="string">&quot;^2.6.11&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-router&quot;</span>: <span class="string">&quot;^3.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vuex&quot;</span>: <span class="string">&quot;^3.4.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// 开发依赖的相关信息，这里的主要是开发过程的依赖，生产环境中不会存在,一般用 npm install XXX --save-dev 安装的依赖会添加到这里</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-babel&quot;</span>: <span class="string">&quot;~4.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-eslint&quot;</span>: <span class="string">&quot;~4.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-router&quot;</span>: <span class="string">&quot;~4.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-vuex&quot;</span>: <span class="string">&quot;~4.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/cli-service&quot;</span>: <span class="string">&quot;~4.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/eslint-config-prettier&quot;</span>: <span class="string">&quot;^6.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-eslint&quot;</span>: <span class="string">&quot;^10.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;^6.7.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-prettier&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-vue&quot;</span>: <span class="string">&quot;^6.2.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint-staged&quot;</span>: <span class="string">&quot;^9.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;node-sass&quot;</span>: <span class="string">&quot;^4.12.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span>: <span class="string">&quot;^2.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sass-loader&quot;</span>: <span class="string">&quot;^8.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-template-compiler&quot;</span>: <span class="string">&quot;^2.6.11&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="额外的文件"><a href="#额外的文件" class="headerlink" title="额外的文件"></a>额外的文件</h1><p>除了上述<code>vue-cli</code>创建项目后默认生成的文件外，我们在开发过程中还需要很多配置文件，且都是在根目录中自己创建的。下面介绍几个相关文件</p><h2 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title=" vue.config.js"></a><span id="vueconfig"> vue.config.js</span></h2><p>这个文件表示 vue 的配置文件，像一些简单的前端服务运行的端口号，是否自动打开，代理地址等。下面是一些简单的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">// 导入Node的path模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析函数，在配置引入别名时用到</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue.config.js的主体配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span>, <span class="comment">// 部署应用包时的基本 URL。用法和 webpack 本身的 output.publicPath 一致。</span></span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span>, <span class="comment">// 当运行 vue-cli-service build 时生成的生产环境构建文件的目录。</span></span><br><span class="line">  <span class="attr">assetsDir</span>: <span class="string">&#x27;assets&#x27;</span>, <span class="comment">// 放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录。</span></span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="comment">// 对css的一些配置</span></span><br><span class="line">    <span class="attr">extract</span>: <span class="literal">true</span>, <span class="comment">// 是否将组件中的 CSS 提取至一个独立的 CSS 文件中 (而不是动态注入到 JavaScript 中的 inline 代码)。</span></span><br><span class="line">    <span class="attr">sourceMap</span>: <span class="literal">false</span> <span class="comment">// 是否为 CSS 开启 source map。设置为 true 之后可能会影响构建的性能。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">lintOnSave</span>: process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 是否在开发环境下通过 eslint-loader 在每次保存时 lint 代码。这个值会在 @vue/cli-plugin-eslint 被安装之后生效。</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 服务相关的设置</span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="comment">// 指定一个主机名</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">8000</span>, <span class="comment">// 指定一个端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 运行成功后是否自动打开页面</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// 代理相关。如果你的前端应用和后端 API 服务器没有运行在同一个主机上，你需要在开发环境下将 API 请求代理到 API 服务器</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">// 对请求接口中出现的api进行代理</span></span><br><span class="line">        <span class="attr">target</span>: process.env.VUE_APP_PROXY_URL, <span class="comment">// 代理的目标地址，这个取值在后面的文件会讲到</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 是否改变域名，</span></span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">false</span>, <span class="comment">// 是否开启webSocket</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="comment">// 路径重写，如果默认不重写路径，那么`/api/users`会被代理到`target路径/api/users`</span></span><br><span class="line">          <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">// 对api进行路径重写，重写后，那么`/api/users`会被代理到`target路径/users`</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// webpack相关的配置，可以设置plugins和别名解析等</span></span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="comment">// 解析设置</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">      <span class="comment">// 别名配置，用来创建 import 或 require 的别名，来确保模块引入变得更简单。</span></span><br><span class="line">      <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="comment">// 用&#x27;@&#x27;表示src的路径， @/views/Home.vue 等同于 src/views/Home.vue.</span></span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">        <span class="comment">// 同理，用@components 表示 src/components目录</span></span><br><span class="line">        <span class="string">&#x27;@components&#x27;</span>: resolve(<span class="string">&#x27;src/components&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;@assets&#x27;</span>: resolve(<span class="string">&#x27;src/assets&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置webpack的plugins</span></span><br><span class="line">    <span class="attr">plugins</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建。</span></span><br><span class="line">  <span class="attr">productionSourceMap</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更多vue的配置可以访问 <a href="https://cli.vuejs.org/zh/config/#%E5%85%A8%E5%B1%80-cli-%E9%85%8D%E7%BD%AE">vue 配置参考</a></strong></p><h2 id="env-development、-env-production-配置文件"><a href="#env-development、-env-production-配置文件" class="headerlink" title=" .env.development、.env.production 配置文件"></a><span id="envconfig"> .env.development、.env.production 配置文件</span></h2><p>这里可以自己创建以上配置文件，用于配置不同环境下的环境变量，其中</p><ul><li><code>.env.development</code>表示开发环境的环境变量</li><li><code>.env.production</code>表示生产环境的环境变量</li><li><code>.env.mock</code>表示 mock 运行状态下的环境变量</li></ul><p>这些环境变量可以在全局使用，使用方法就是<code>process.env.XXXX</code>。其中 xxxx 表示变量名</p><p>由于上面在<code>vue.config.js</code>配置文件中<code>proxy</code>代理配置的属性<code>target</code>的值使用了<code>process.env.VUE_APP_PROXY_URL</code>变量。所以我在<code>env.development</code>文件里定义如下变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_PROXY_ROOT = <span class="string">&#x27;http://192.168.2.25:6060/&#x27;</span></span><br></pre></td></tr></table></figure><p>于是在开发过程中，向 <code>/api/user</code> 地址发送请求就等同于向 <code>http://192.168.2.25:6060/user </code> 地址发送请求</p><h2 id="prettierrc文件"><a href="#prettierrc文件" class="headerlink" title=" .prettierrc文件"></a><span id="prettier"> .prettierrc文件</span></h2><ul><li><code>Prettier</code>是一个代码格式化工具，可以在开发过程中，使代码格式化成你想要的风格和规范。</li></ul><p>开发前端的过程中，我们要求开发人员都在<code>VSCode</code>中装入<code>Prettier</code>插件，方便格式化。与 ESLint 一样，为了统一代码风格和规范，所以 Prettier 也是在团队开发中重要的一员。</p><ul><li><code>.prettierrc</code>文件就是配置使用 Prettier 格式化代码的方式（注意该文件中的注释需要删除后才会生效）</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;eslintIntegration&quot;</span>: <span class="literal">true</span>, <span class="comment">// eslint集成</span></span><br><span class="line">  <span class="attr">&quot;stylelintIntegration&quot;</span>: <span class="literal">true</span>, <span class="comment">// 样式嵌入</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span>: <span class="literal">true</span>, <span class="comment">// 是否使用单引号</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span>: <span class="literal">false</span>, <span class="comment">// 结尾是否保留分号，设置为false表示结尾不会有分号</span></span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span>: <span class="string">&quot;none&quot;</span>, <span class="comment">// 对象、数组等，最后一个是否保留逗号，设置为none表示不保留逗号， es5表示保留es5的结尾逗号</span></span><br><span class="line">  <span class="attr">&quot;arrowParens&quot;</span>: <span class="string">&quot;avoid&quot;</span>, <span class="comment">// 箭头函数中只有一个参数是否保留括号，aviod表示不保留括号，always表示保留括号</span></span><br><span class="line">  <span class="attr">&quot;bracketSpacing&quot;</span>: <span class="literal">true</span>, <span class="comment">// 对象中的空格 默认true</span></span><br><span class="line">  <span class="attr">&quot;useTabs&quot;</span>: <span class="literal">false</span>, <span class="comment">// 使用tab缩进，默认false</span></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span>: <span class="number">2</span> <span class="comment">// tab缩进大小，2个空格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更多prettier的配置内容请访问<a href="https://prettier.io/docs/en/options.html">Prettier 配置</a></strong></p><h1 id="更多的项目内容可以查看以下-github-地址"><a href="#更多的项目内容可以查看以下-github-地址" class="headerlink" title="更多的项目内容可以查看以下 github 地址"></a>更多的项目内容可以查看以下 github 地址</h1><p><a href="https://github.com/He-Huang/vue-project-structure">https://github.com/He-Huang/vue-project-structure</a></p><h1 id="参考地址："><a href="#参考地址：" class="headerlink" title="参考地址："></a>参考地址：</h1><ol><li><a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">vue 脚手架创建项目</a></li><li><a href="https://www.jianshu.com/p/a09a5a222a76">ESLint 配置文件 .eslintrc 示例及说明</a></li><li><a href="https://eslint.bootcss.com/docs/user-guide/configuring">ESLint 中文网</a> </li><li><a href="http://markdown.p2hp.com/basic-syntax/index.html">markdown基本语法</a></li><li><a href="https://babel.docschina.org/docs/en/config-files/#project-wide-configuration">Babel 配置文件</a></li><li><a href="https://cli.vuejs.org/zh/config/#%E5%85%A8%E5%B1%80-cli-%E9%85%8D%E7%BD%AE">vue 配置参考</a></li><li><a href="https://prettier.io/docs/en/options.html">Prettier 配置</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表格不分页渲染大量数据卡顿的优化方案</title>
      <link href="/wangq1231/2021/08/05/%E2%96%92%D1%8D%E2%95%95%D1%91%E2%95%A9%C2%A4%E2%95%9B%E2%96%8C%E2%95%A3%C2%A4%E2%95%A2%D1%80%D1%84%E2%95%93%E2%95%9A%E2%95%9B%E2%94%90%D0%B8%E2%95%A2%E2%94%98%E2%95%AC%E2%95%A9%E2%95%A0%D1%82%E2%95%99%E2%94%BC%E2%95%97%D0%BF/"/>
      <url>/wangq1231/2021/08/05/%E2%96%92%D1%8D%E2%95%95%D1%91%E2%95%A9%C2%A4%E2%95%9B%E2%96%8C%E2%95%A3%C2%A4%E2%95%A2%D1%80%D1%84%E2%95%93%E2%95%9A%E2%95%9B%E2%94%90%D0%B8%E2%95%A2%E2%94%98%E2%95%AC%E2%95%A9%E2%95%A0%D1%82%E2%95%99%E2%94%BC%E2%95%97%D0%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><blockquote><p>在开发项目的过程中遇到需求：表格渲染大量的数据，要求不使用分页。并且要运行在硬件配置相对较低及浏览器版本也较低的政府相关部门中。</p><p>结果：正常使用蚂蚁金服的Table组件渲染的话，在低配置电脑和低版本浏览器中渲染非常卡顿，甚至导致页面卡死。于是需要进行优化。高配置一点的电脑，渲染不会卡死，但也会有五六秒左右的渲染时间。</p></blockquote><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ol><li><p>保证Table组件中渲染的数据，永远只有20条(可以任意其他条数都行)。当滚动条滚动时，则渲染不同的20条数据。</p></li><li><p>在表格DOM结构中append一个<code>tr节点</code>，设置高度，用于撑开表格结构，使渲染20条数据的滚动条高度看起来和渲染所有数据的滚动条高度一样(随着滚动条滚动，这个<code>tr节点</code>的高度要随之减少)</p></li><li><p>同样为了视觉效果，需要设置表格DOM结构的<code>transform: translateY</code>属性，使得表格滚动时，其上部的高度也能撑开</p><p><strong>实现方法</strong>：</p><ul><li>Vue中可以使用computed计算属性，对所有的数据进行过滤，只取20条。</li><li>监听表格的滚动事件，在事件中改变当前的20条数据，同时改变<code>tr节点</code>的高度以及表格的<code>transform: translateY</code>属性</li></ul></li></ol><p>以下是我抽离的一个简单组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;tableWrap&quot;&gt;</span><br><span class="line">    &lt;a-table</span><br><span class="line">      ref=&quot;antTableRef&quot;</span><br><span class="line">      :rowKey=&quot;rowKey&quot;</span><br><span class="line">      :dataSource=&quot;filteredData&quot;</span><br><span class="line">      :columns=&quot;tableColumns&quot;</span><br><span class="line">      :pagination=&quot;false&quot;</span><br><span class="line">      :scroll=&quot;scroll&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template</span><br><span class="line">        v-for=&quot;slotItem of slots&quot;</span><br><span class="line">        :slot=&quot;slotItem.name&quot;</span><br><span class="line">        slot-scope=&quot;text, record, index, column&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;template v-if=&quot;&#x27;customTitleCheck&#x27; === slotItem.name&quot;&gt;</span><br><span class="line">          &lt;a-checkbox</span><br><span class="line">            :key=&quot;slotItem.name&quot;</span><br><span class="line">            :disabled=&quot;disabledAll&quot;</span><br><span class="line">            :checked=&quot;checkedAll&quot;</span><br><span class="line">            :indeterminate=&quot;indeterminateAll&quot;</span><br><span class="line">            @change=&quot;handleCheckChangeAll&quot;</span><br><span class="line">          &gt;&lt;/a-checkbox&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template v-else-if=&quot;&#x27;customTableCheck&#x27; === slotItem.name&quot;&gt;</span><br><span class="line">          &lt;a-checkbox</span><br><span class="line">            :key=&quot;slotItem.name&quot;</span><br><span class="line">            :checked=&quot;selectedRowKeys.includes(record[rowKey])&quot;</span><br><span class="line">            :disabled=&quot;handleCheckDisabled(record)&quot;</span><br><span class="line">            @change=&quot;e =&gt; handleCheckChange(e, record)&quot;</span><br><span class="line">          &gt;&lt;/a-checkbox&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;slot v-else :name=&quot;slotItem.name&quot; v-bind=&quot;&#123; text, record, index, column &#125;&quot;&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/a-table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; Table &#125; from &#x27;ant-design-vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;TableRender&#x27;,</span><br><span class="line">  // 扩展ant的Table组件</span><br><span class="line">  extends: Table,</span><br><span class="line">  props: &#123;</span><br><span class="line">    rowKey: &#123;</span><br><span class="line">      type: [String, Function],</span><br><span class="line">      default() &#123;</span><br><span class="line">        return &#x27;id&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 表头数据</span><br><span class="line">    columns: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      default() &#123;</span><br><span class="line">        return []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 是否显示选择框</span><br><span class="line">    showChecked: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default() &#123;</span><br><span class="line">        return true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    defaultCheckedKeys: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      default() &#123;</span><br><span class="line">        return []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 复选框禁用方法</span><br><span class="line">    disbleCheckedFunc: &#123;</span><br><span class="line">      type: [Function, Boolean],</span><br><span class="line">      default() &#123;</span><br><span class="line">        return () =&gt; &#123;</span><br><span class="line">          return false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    scroll: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default() &#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    tableDatas: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      default() &#123;</span><br><span class="line">        return []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 显示条数，默认显示20条，只渲染20个trDOM</span><br><span class="line">    showNum: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default() &#123;</span><br><span class="line">        return 20</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 溢出显示条数的显示数量</span><br><span class="line">    spillDataNum: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default() &#123;</span><br><span class="line">        return 20</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tableData: [],</span><br><span class="line">      currentStartIndex: 0,</span><br><span class="line">      currentEndIndex: this.showNum,</span><br><span class="line">      selectedRowKeys: this.defaultCheckedKeys,</span><br><span class="line">      disabledAll: false,</span><br><span class="line">      checkedAll: false,</span><br><span class="line">      canChooseLength: 0,</span><br><span class="line">      tableWrapRef: &#x27;&#x27;,</span><br><span class="line">      showRowNum: 0,</span><br><span class="line">      rowHeight: 40,</span><br><span class="line">      selectTbody: &#x27;&#x27;,</span><br><span class="line">      createElementTR: &#x27;&#x27;,</span><br><span class="line">      createElementTRHeight: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    tableDatas() &#123;</span><br><span class="line">      this.initScrollDOM()</span><br><span class="line">      // 设置全选的禁用</span><br><span class="line">      this.disabledAll = true</span><br><span class="line">      this.tableDatas.forEach(item =&gt; &#123;</span><br><span class="line">        if (!this.handleCheckDisabled(item)) &#123;</span><br><span class="line">          this.canChooseLength++</span><br><span class="line">          this.disabledAll = false</span><br><span class="line">          return</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    filteredData() &#123;</span><br><span class="line">      let list = this.tableDatas.filter((item, index) =&gt; &#123;</span><br><span class="line">        if (index &lt; this.currentStartIndex) &#123;</span><br><span class="line">          return false</span><br><span class="line">        &#125; else if (index &gt; this.currentEndIndex) &#123;</span><br><span class="line">          return false</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          return true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      return list</span><br><span class="line">    &#125;,</span><br><span class="line">    tableColumns() &#123;</span><br><span class="line">      let columns = this.columns</span><br><span class="line">      if (!this.showChecked) &#123;</span><br><span class="line">        return columns</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        columns.unshift(&#123;</span><br><span class="line">          width: 70,</span><br><span class="line">          scopedSlots: &#123;</span><br><span class="line">            title: &#x27;customTitleCheck&#x27;,</span><br><span class="line">            customRender: &#x27;customTableCheck&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        return columns</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 插槽</span><br><span class="line">    slots() &#123;</span><br><span class="line">      const slots = []</span><br><span class="line">      for (const column of this.columns) &#123;</span><br><span class="line">        const conf = &#123;&#125;</span><br><span class="line">        for (const k in column) &#123;</span><br><span class="line">          if (k !== &#x27;scopedSlots&#x27;) conf[k] = column[k]</span><br><span class="line">        &#125;</span><br><span class="line">        if (column.scopedSlots &amp;&amp; column.scopedSlots.customRender) &#123;</span><br><span class="line">          slots.push(&#123;</span><br><span class="line">            name: column.scopedSlots.customRender,</span><br><span class="line">            conf: conf</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        if (column.scopedSlots &amp;&amp; column.scopedSlots.title) &#123;</span><br><span class="line">          slots.push(&#123;</span><br><span class="line">            name: column.scopedSlots.title,</span><br><span class="line">            conf: conf</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        if (column.children) &#123;</span><br><span class="line">          const childrens = column.children</span><br><span class="line">          childrens.map(child =&gt; &#123;</span><br><span class="line">            if (child.scopedSlots) &#123;</span><br><span class="line">              childrens.valueKey = child.key</span><br><span class="line">              slots.push(&#123;</span><br><span class="line">                name: `$&#123;child.scopedSlots.customRender&#125;`,</span><br><span class="line">                conf: child</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return slots</span><br><span class="line">    &#125;,</span><br><span class="line">    selectedRow() &#123;</span><br><span class="line">      const rows = []</span><br><span class="line">      const selectedLength = this.selectedRowKeys.length</span><br><span class="line">      for (const table of this.tableDatas) &#123;</span><br><span class="line">        if (this.selectedRowKeys.includes(table[this.rowKey])) &#123;</span><br><span class="line">          rows.push(table)</span><br><span class="line">        &#125;</span><br><span class="line">        if (rows.length &gt;= selectedLength) &#123;</span><br><span class="line">          break</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return rows</span><br><span class="line">    &#125;,</span><br><span class="line">    indeterminateAll() &#123;</span><br><span class="line">      const length = this.selectedRowKeys.length</span><br><span class="line">      return length &gt; 0 &amp;&amp; length &lt; this.canChooseLength</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    initScrollDOM() &#123;</span><br><span class="line">      this.$nextTick(() =&gt; &#123;</span><br><span class="line">        this.tableRef = this.$refs.antTableRef</span><br><span class="line">        const el = this.tableRef.$el</span><br><span class="line">        const dataSize = this.tableDatas.length</span><br><span class="line">        const selectWrap = el.querySelector(&#x27;.ant-table-body&#x27;)</span><br><span class="line">        this.selectTbody = selectWrap.querySelector(&#x27;table tbody&#x27;)</span><br><span class="line">        const selectRow = selectWrap.querySelector(&#x27;table tr&#x27;)</span><br><span class="line">        if (!selectRow) &#123;</span><br><span class="line">          return</span><br><span class="line">        &#125;</span><br><span class="line">        this.rowHeight = selectRow.clientHeight</span><br><span class="line">        this.showRowNum = Math.round(selectWrap.clientHeight / this.rowHeight)</span><br><span class="line"></span><br><span class="line">        this.createElementTR = document.createElement(&#x27;tr&#x27;)</span><br><span class="line">        let createElementTRHeight =</span><br><span class="line">          (dataSize - this.showRowNum - this.spillDataNum) * this.rowHeight</span><br><span class="line">        this.createElementTR.setAttribute(&#x27;style&#x27;, `height: $&#123;createElementTRHeight&#125;px;`)</span><br><span class="line">        this.selectTbody.append(this.createElementTR)</span><br><span class="line"></span><br><span class="line">        selectWrap.addEventListener(&#x27;scroll&#x27;, e =&gt; &#123;</span><br><span class="line">          const target = e.target</span><br><span class="line">          let topPx = target.scrollTop - this.spillDataNum * this.rowHeight</span><br><span class="line">          let topNum = Math.round(topPx / this.rowHeight)</span><br><span class="line">          let minTopNum = dataSize - this.spillDataNum - this.showRowNum</span><br><span class="line">          if (topNum &gt; minTopNum) &#123;</span><br><span class="line">            topNum = minTopNum</span><br><span class="line">          &#125;</span><br><span class="line">          if (topNum &lt; 0) &#123;</span><br><span class="line">            topNum = 0</span><br><span class="line">            topPx = 0</span><br><span class="line">          &#125;</span><br><span class="line">          this.selectTbody.setAttribute(&#x27;style&#x27;, `transform: translateY($&#123;topPx&#125;px)`)</span><br><span class="line">          this.createElementTR.setAttribute(</span><br><span class="line">            &#x27;style&#x27;,</span><br><span class="line">            `height: $&#123;createElementTRHeight - topPx &gt; 0 ? createElementTRHeight - topPx : 0&#125;px;`</span><br><span class="line">          )</span><br><span class="line">          this.currentStartIndex = topNum</span><br><span class="line">          this.currentEndIndex = topNum + this.showRowNum + this.spillDataNum</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCheckDisabled(record) &#123;</span><br><span class="line">      return this.disbleCheckedFunc(record)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCheckChange(e, item) &#123;</span><br><span class="line">      const checked = e.target.checked</span><br><span class="line">      if (checked) &#123;</span><br><span class="line">        if (this.selectedRowKeys.includes(item[this.rowKey])) return</span><br><span class="line">        this.selectedRowKeys.push(item[this.rowKey])</span><br><span class="line">        item.checked = true</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        const keyIndex = this.selectedRowKeys.indexOf(item[this.rowKey])</span><br><span class="line">        this.selectedRowKeys.splice(keyIndex, 1)</span><br><span class="line">        item.checked = false</span><br><span class="line">      &#125;</span><br><span class="line">      this.$emit(&#x27;handleTableCheck&#x27;, this.selectedRowKeys, this.selectedRow)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCheckChangeAll(e) &#123;</span><br><span class="line">      const checked = e.target.checked</span><br><span class="line">      if (checked) &#123;</span><br><span class="line">        this.checkedAll = true</span><br><span class="line">        for (const data of this.tableDatas) &#123;</span><br><span class="line">          if (</span><br><span class="line">            !this.handleCheckDisabled(data) &amp;&amp;</span><br><span class="line">            !this.selectedRowKeys.includes(data[this.rowKey])</span><br><span class="line">          ) &#123;</span><br><span class="line">            this.selectedRowKeys.push(data[this.rowKey])</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.checkedAll = false</span><br><span class="line">        this.selectedRowKeys = []</span><br><span class="line">      &#125;</span><br><span class="line">      this.$emit(&#x27;handleCheckChangeAll&#x27;, checked, this.selectedRowKeys, this.selectedRow)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是该组件的使用组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;TableRender</span><br><span class="line">      :columns=&quot;columns&quot;</span><br><span class="line">      :tableDatas=&quot;tableDatas&quot;</span><br><span class="line">      :showChecked=&quot;true&quot;</span><br><span class="line">      :scroll=&quot;&#123; y: 400 &#125;&quot;</span><br><span class="line">      :defaultCheckedKeys=&quot;defaultCheckedKeys&quot;</span><br><span class="line">      :disbleCheckedFunc=&quot;disbleCheckedFunc&quot;</span><br><span class="line">      @handleTableCheck=&quot;handleTableCheck&quot;</span><br><span class="line">      @handleCheckChangeAll=&quot;handleCheckChangeAll&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template slot=&quot;operate&quot;&gt;</span><br><span class="line">        &lt;a-button type=&quot;primary&quot;&gt;查看&lt;/a-button&gt;</span><br><span class="line">        &lt;a-button type=&quot;danger&quot;&gt;删除&lt;/a-button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/TableRender&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import TableRender from &#x27;../components/TableRender.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    TableRender</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tableDatas: [],</span><br><span class="line">      currentStartIndex: 0,</span><br><span class="line">      currentEndIndex: 20,</span><br><span class="line">      columns: [</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;序号&#x27;,</span><br><span class="line">          dataIndex: &#x27;id&#x27;,</span><br><span class="line">          key: &#x27;id&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;姓名&#x27;,</span><br><span class="line">          dataIndex: &#x27;name&#x27;,</span><br><span class="line">          key: &#x27;name&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;年龄&#x27;,</span><br><span class="line">          dataIndex: &#x27;age&#x27;,</span><br><span class="line">          key: &#x27;age&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;性别&#x27;,</span><br><span class="line">          dataIndex: &#x27;sex&#x27;,</span><br><span class="line">          key: &#x27;sex&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;描述&#x27;,</span><br><span class="line">          dataIndex: &#x27;description&#x27;,</span><br><span class="line">          key: &#x27;description&#x27;,</span><br><span class="line">          width: 280</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title: &#x27;操作&#x27;,</span><br><span class="line">          scopedSlots: &#123;</span><br><span class="line">            customRender: &#x27;operate&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      defaultCheckedKeys: [4, 8]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.getTableData()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    disbleCheckedFunc(record) &#123;</span><br><span class="line">      return record.id % 4 === 0</span><br><span class="line">    &#125;,</span><br><span class="line">    getTableData() &#123;</span><br><span class="line">      let cont = 0</span><br><span class="line">      let tableDatas = []</span><br><span class="line">      while (cont &lt; 10000) &#123;</span><br><span class="line">        cont = cont + 1</span><br><span class="line">        let object = &#123;</span><br><span class="line">          name: &#x27;张三丰&#x27; + cont,</span><br><span class="line">          age: cont,</span><br><span class="line">          sex: cont % 2 === 0 ? &#x27;男&#x27; : &#x27;女&#x27;,</span><br><span class="line">          description: &#x27;纸上得来终觉浅，绝知此事要躬行&#x27;,</span><br><span class="line">          id: cont</span><br><span class="line">        &#125;</span><br><span class="line">        tableDatas.push(object)</span><br><span class="line">      &#125;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        this.tableDatas = tableDatas</span><br><span class="line">      &#125;, 0)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleTableCheck(selectedRowKeys, selectedRow) &#123;</span><br><span class="line">      console.log(&#x27;选中的key：&#x27;, selectedRowKeys)</span><br><span class="line">      console.log(&#x27;选中的对象:&#x27;, selectedRow)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCheckChangeAll(checked, selectedRowKeys, selectedRow) &#123;</span><br><span class="line">      console.log(checked)</span><br><span class="line">      console.log(&#x27;选中的key：&#x27;, selectedRowKeys)</span><br><span class="line">      console.log(&#x27;选中的对象:&#x27;, selectedRow)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p>可在以下地址查看效果: </p><p><a href="http://hehuang.site/Components/#/">http://hehuang.site/Components/#/</a></p><p>参考博客：</p><p><a href="https://www.cnblogs.com/wiliam/p/14991509.html">https://www.cnblogs.com/wiliam/p/14991509.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node连接mysql创建简单服务</title>
      <link href="/wangq1231/2021/07/10/node%E2%94%B4%D0%BC%E2%95%9C%E2%95%99mysql%E2%94%A4%E2%94%A4%E2%95%9C%D0%B8%E2%95%9D%D0%84%E2%95%A1%D0%B5%E2%95%96%E2%96%A0%E2%95%AC%D1%91/"/>
      <url>/wangq1231/2021/07/10/node%E2%94%B4%D0%BC%E2%95%9C%E2%95%99mysql%E2%94%A4%E2%94%A4%E2%95%9C%D0%B8%E2%95%9D%D0%84%E2%95%A1%D0%B5%E2%95%96%E2%96%A0%E2%95%AC%D1%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 引入mysql</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">let</span> port = <span class="number">3030</span> <span class="comment">// 设置服务端允许的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个时间转化函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DateToString</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!date) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> year = date.getFullYear()</span><br><span class="line">  <span class="keyword">let</span> month = date.getMonth() + <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> day = date.getDate()</span><br><span class="line">  <span class="keyword">return</span> year + <span class="string">&#x27;-&#x27;</span> + month + <span class="string">&#x27;-&#x27;</span> + day</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置允许跨域请求</span></span><br><span class="line">app.all(<span class="string">&#x27;*&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Origin, X-Requested-With, Content-Type, Accept&#x27;</span>)</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;PUT,POST,GET,DELETE,OPTIONS&#x27;</span>)</span><br><span class="line">  res.header(<span class="string">&#x27;X-Powered-By&#x27;</span>, <span class="string">&#x27; 3.2.1&#x27;</span>)</span><br><span class="line">  res.header(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置mysql相关参数</span></span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;todos&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立数据库连接</span></span><br><span class="line">connection.connect()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增数据（这里为了方便使用get请求，通过路径传参获取参数）</span></span><br><span class="line">app.get(<span class="string">&#x27;/addTodo&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> post = req.query</span><br><span class="line">  <span class="keyword">if</span> (!post.title || !post.done) &#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;请传入参数&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 新增数据</span></span><br><span class="line">  <span class="keyword">const</span> addSql = <span class="string">&#x27;insert into todoList(title,done,date) values(?,?,?)&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> addSqlParams = [post.title, post.done, DateToString(<span class="keyword">new</span> <span class="built_in">Date</span>())]</span><br><span class="line">  connection.query(addSql, addSqlParams, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">400</span>,</span><br><span class="line">        <span class="attr">message</span>: err.message,</span><br><span class="line">        <span class="attr">result</span>: err.message,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;[INSERT ERROR] - &#x27;</span>, err.message)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;新增成功&#x27;</span>,</span><br><span class="line">      result,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过id获取数据</span></span><br><span class="line">app.get(<span class="string">&#x27;/getTodo&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = req.query</span><br><span class="line">  <span class="built_in">console</span>.log(req)</span><br><span class="line">  <span class="keyword">let</span> querySql = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">    querySql = <span class="string">&#x27;select * from todoList&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    querySql = <span class="string">&#x27;select * from todoList where id = ?&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  connection.query(querySql, id, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id, <span class="string">&#x27;获取数据&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">400</span>,</span><br><span class="line">        <span class="attr">message</span>: err.message,</span><br><span class="line">        <span class="attr">result</span>: err.message,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;[INSERT ERROR] - &#x27;</span>, err.message)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;查询成功&#x27;</span>,</span><br><span class="line">      result,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页获取数据</span></span><br><span class="line">app.get(<span class="string">&#x27;/getTodo/:current/:pageSize&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 从请求路径中获取第几页和每页的条数</span></span><br><span class="line">  <span class="keyword">const</span> &#123; current, pageSize &#125; = req.params</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * current = 1, pageSize = 10 就是取当前数据的第一个十条；current = 2表示取第二个十条。</span></span><br><span class="line"><span class="comment">   * sql语句的offset,limit，offset偏移量，就是从数据的第几条开始，limit数量，就是取多少条数据</span></span><br><span class="line"><span class="comment">   *    select * from todos (where id = ?) limit 10 offset 0。</span></span><br><span class="line"><span class="comment">   *    这句话就是从所有数据中取前10条，以此类推，offset包括这条数据，0的话包括第0条就是第一条，注意的是where条件要放在之前，不然会报错</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> offset = <span class="built_in">Number</span>(current - <span class="number">1</span>) * <span class="built_in">Number</span>(pageSize)</span><br><span class="line">  <span class="keyword">let</span> querySql = <span class="string">`select * from todoList limit <span class="subst">$&#123;pageSize&#125;</span> offset <span class="subst">$&#123;offset&#125;</span>`</span></span><br><span class="line">  <span class="comment">// 获取total值</span></span><br><span class="line">  connection.query(<span class="string">&#x27;select count(*) from todolist&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    total = results[<span class="number">0</span>][<span class="string">&#x27;count(*)&#x27;</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  connection.query(querySql, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">400</span>,</span><br><span class="line">        <span class="attr">message</span>: err.message,</span><br><span class="line">        <span class="attr">result</span>: err.message,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;[INSERT ERROR] - &#x27;</span>, err.message)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;查询成功&#x27;</span>,</span><br><span class="line">      <span class="attr">result</span>: &#123; <span class="attr">data</span>: result, <span class="attr">pageSize</span>: pageSize, <span class="attr">pageNum</span>: current, total &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数据</span></span><br><span class="line"><span class="comment">// var modSql = &#x27;UPDATE todoList SET title = ?, done = ? WHERE id = ?&#x27;</span></span><br><span class="line"><span class="comment">// var modSqlParams = [&#x27;拉粑粑&#x27;, 1, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// connection.query(modSql, modSqlParams, function (err, result) &#123;</span></span><br><span class="line"><span class="comment">//   if (err) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;[UPDATE ERROR] - &#x27;, err.message)</span></span><br><span class="line"><span class="comment">//     return</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;UPDATE affectedRows&#x27;, result.affectedRows)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line">app.get(<span class="string">&#x27;/delTodo&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = req.query</span><br><span class="line">  <span class="keyword">let</span> delSql = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;请传入参数&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    delSql = <span class="string">&#x27;delete from todoList where id = ?&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  connection.query(delSql, id, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">400</span>,</span><br><span class="line">        <span class="attr">message</span>: err.message,</span><br><span class="line">        <span class="attr">data</span>: err.message,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;[INSERT ERROR] - &#x27;</span>, err.message)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;删除成功&#x27;</span>,</span><br><span class="line">      result,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`服务运行在<span class="subst">$&#123;port&#125;</span>端口`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中Map和Object的对比</title>
      <link href="/wangq1231/2021/06/22/JS%E2%95%A9%C2%A4%E2%95%9B%E2%96%8C%E2%95%9C%D1%81%E2%95%A3%E2%95%A3%E2%95%93%D0%BEMap/"/>
      <url>/wangq1231/2021/06/22/JS%E2%95%A9%C2%A4%E2%95%9B%E2%96%8C%E2%95%9C%D1%81%E2%95%A3%E2%95%A3%E2%95%93%D0%BEMap/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><blockquote><p>在做算法题的过程中，发现当用数字作为一个对象的键来存储数据时，后续取对象中的数据，并不会根据你存入的顺序取出数据。</p><p>由此判断出对象中的键其实不是无序的，这个时候可以使用 Map 数据结构来代替。</p></blockquote><h3 id="一、Map-介绍"><a href="#一、Map-介绍" class="headerlink" title="一、Map 介绍"></a>一、Map 介绍</h3><p>Map 和 Object 一样用来存取键值对形式的数据。不过 Object 可以使用字面量和构造函数两种方式创建，而 Map 结构必须使用构造函数创建。如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空的Map对象</span></span><br><span class="line"><span class="keyword">const</span> mapOne = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Map对象并赋初值，参数必须是一个数组(或iterable对象)。</span></span><br><span class="line"><span class="comment">// 其元素为键值对(两个元素的数组，例如: [[ 1, &#x27;one&#x27; ],[ 2, &#x27;two&#x27; ]])。 每个键值对都会添加到新的 Map</span></span><br><span class="line"><span class="keyword">const</span> mapTwo = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">  [<span class="literal">true</span>, <span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">  [&#123; <span class="attr">a</span>: <span class="string">&#x27;1&#x27;</span> &#125;, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>正如上述第二种方式创建 Map，Map 的键可以为任意数据结构。</p><h3 id="二、Map-和-Object-的对比"><a href="#二、Map-和-Object-的对比" class="headerlink" title="二、Map 和 Object 的对比"></a>二、Map 和 Object 的对比</h3><table><thead><tr><th></th><th>Map</th><th>Object</th></tr></thead><tbody><tr><td>创建方式</td><td><code>const myMap = new Map()</code></td><td><code>const obj = &#123;&#125;</code> 或 <code>const myObj = new Object()</code></td></tr><tr><td>键的类型</td><td>一个 <code>Map</code>的键可以是<strong>任意值</strong>，包括函数、对象或任意基本类型。</td><td>一个<code>Object</code> 的键必须是一个 <code>String</code>或是<code>Symbol</code></td></tr><tr><td>键的顺序</td><td><code>Map</code> 中的 key 是有序的。因此，当迭代的时候，一个 <code>Map</code> 对象以插入的顺序返回键值。</td><td>一个 <code>Object</code> 的键是无序的</td></tr><tr><td>获取一个键(key)的值</td><td><code>let value = myMap.get(key)</code></td><td><code>let value = obj.key</code> 或 <code>let value = obj[key]</code></td></tr><tr><td>往对象中新增一个键值对</td><td><code>myMap.set(key, value)</code></td><td><code>obj.key = value</code> 或 <code>obj[key] = value</code></td></tr><tr><td>删除对象中的键值对</td><td><code>myMap.delete(key)</code></td><td><code>delete obj.key</code> 或 <code>delete obj[key]</code></td></tr><tr><td>对象的 Size</td><td><code>let size = myMap.size</code></td><td><code>let size = 0; for (const key in obj) &#123; size++ &#125;</code></td></tr><tr><td>遍历对象</td><td>可直接用 forEach、for、forin、forof 进行遍历</td><td>只能用 forin 进行遍历</td></tr><tr><td>性能</td><td>在频繁增删键值对的场景下表现更好。</td><td>在频繁添加和删除键值对的场景下未作出优化。</td></tr></tbody></table><h3 id="三、本次使用的场景"><a href="#三、本次使用的场景" class="headerlink" title="三、本次使用的场景"></a>三、本次使用的场景</h3><p>在算法题中，我需要用一个对象来存储一个整数数组中元素为键，出现的次数为值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如：</span></span><br><span class="line">arr = [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">// 存储为</span></span><br><span class="line">obj = &#123;</span><br><span class="line">  <span class="number">3</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有另一个需求是，我后续需要根据存进对象的顺序来移除键值对，又因为这里的键是数字，JS 运行环境中，默认又重新根据数字的大小排列了对象，如下图，于是很难根据存入的顺序来进行删除，这时就可以使用 Map 结构</p><p><img src= "/wangq1231/img/loading.gif" data-lazy-src="/assets/blogImg/js-map/image-20210622232356850.png" alt="image-20210622232356850"></p><p>使用 Map 存储该内容后，结果如下：</p><p><img src= "/wangq1231/img/loading.gif" data-lazy-src="/assets/blogImg/js-map/image-20210622232716729.png" alt="image-20210622232716729"></p><h3 id="四、推荐使用-Map-的场景"><a href="#四、推荐使用-Map-的场景" class="headerlink" title="四、推荐使用 Map 的场景"></a>四、推荐使用 Map 的场景</h3><ol><li>在存取对象时，需要有序的情况下，最好使用 Map</li><li>在需要频繁增删对象中的键值对时，最好使用 Map</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技能提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查缺补漏之async await</title>
      <link href="/wangq1231/2021/06/19/%E2%96%93%D1%89%E2%95%9A%E2%96%92%E2%96%93%E2%95%A3%E2%94%AC%D0%B9%E2%95%93%D0%BEasync%20await/"/>
      <url>/wangq1231/2021/06/19/%E2%96%93%D1%89%E2%95%9A%E2%96%92%E2%96%93%E2%95%A3%E2%94%AC%D0%B9%E2%95%93%D0%BEasync%20await/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><blockquote><p>在开发过程中，时有遇到多个请求时，后一个请求需要依赖前一个请求拿到的结果进行请求。为处理这种情况，下面对 ES6 中<code>Promise</code>方法和<code>async</code>和<code>await</code>关键字进行总结</p></blockquote><h3 id="一、Promise-方法使用"><a href="#一、Promise-方法使用" class="headerlink" title="一、Promise 方法使用"></a>一、Promise 方法使用</h3><p>在编写 vue 组件时，我们的请求大多都写在 methods 对象中，要想将请求封装成独立的方法，通常会使用如下形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">testGet</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$axios(<span class="string">&#x27;https://jsonplaceholder.typicode.com/comments/1&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;请求成功&#x27;</span>, res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;请求失败&#x27;</span>, err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样在其他方法内需要调用该接口则直接调用该 testGet 方法即可。这个时候如果需要当前请求的结果作为另一个请求的参数，那么显然这个方法就不能这样写，因为这样就无法同步的拿到当前请求的结果</p><p>于是可以使用<code>Promise</code>将以上方法改写，<code>Promise</code>对象是一个构造函数，用来生成<code>Promise</code>实例。将上面的请求方法用 Promise 构造函数改造后如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="title">testGet</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      that</span><br><span class="line">        .$axios(<span class="string">&#x27;https://jsonplaceholder.typicode.com/comments/1&#x27;</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (res.status === <span class="number">200</span>) &#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">&#x27;请求成功&#x27;</span>, res)</span><br><span class="line">             resolve(res)</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;请求失败&#x27;</span>, err)</span><br><span class="line">           reject(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样，在其他方法中，想要获取该接口的返回值来作为参数继续请求时就可以使用如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="title">useTestGet</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.testGet().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> queryData = res.data</span><br><span class="line">    <span class="built_in">this</span>.$axios(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://jsonplaceholder.typicode.com/posts&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: queryData,</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>当然这样写功能是可以实现的，但是可读性较差，而且当请求数过多时，且都需要一个先后顺序，这就会形成传说中的回调地狱，回调地狱大概就长如下的样子吧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">testPromise</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$axios(<span class="string">&#x27;https://jsonplaceholder.typicode.com/comments/1&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;comment1拿到了&#x27;</span>, res)</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$axios(<span class="string">&#x27;https://jsonplaceholder.typicode.com/comments/2&#x27;</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;comment2拿到了&#x27;</span>, res)</span><br><span class="line">    &#125;)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$axios(<span class="string">&#x27;https://jsonplaceholder.typicode.com/comments/3&#x27;</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;comment3拿到了&#x27;</span>, res)</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.$axios(<span class="string">&#x27;https://jsonplaceholder.typicode.com/comments/4&#x27;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;comment4拿到了&#x27;</span>, res)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>要解决回调地狱，也为了使代码更具可读性，ES2017 推出<code>async</code>和<code>await</code>关键字</p><h3 id="二、async-和-await"><a href="#二、async-和-await" class="headerlink" title="二、async 和 await"></a>二、async 和 await</h3><p><code>async</code>字面意思就是“异步”，该关键字用在一个函数的定义前面，用于表示这个函数是异步操作，这个函数的返回结果将是一个<code>Promise</code>对象。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;hello async&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = testAsync()</span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// 控制台输出 Promise &#123;&lt;fulfilled&gt;: &quot;hello async&quot;&#125;</span></span><br></pre></td></tr></table></figure><p><code>await</code>字面意思等待，等待的就是异步函数的执行结果，这个时候会阻塞后面的代码，等待着 <code>Promise</code> 对象的 <code>resolve</code>，然后得到 <code>resolve</code> 的值，作为 <code>await</code> 表达式的运算结果。也就是说，代码执行到<code>await</code>时，在没有拿到结果之前，是不会继续执行下面的代码的。看下面的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;1s后执行的代码&#x27;</span>)</span><br><span class="line">      resolve(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> getData()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;await之后的代码...&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;await的结果&#x27;</span>, data)</span><br><span class="line">&#125;</span><br><span class="line">testAsync()</span><br><span class="line"><span class="comment">// 控制台输出如下</span></span><br><span class="line"><span class="comment">// 1s后执行的代码</span></span><br><span class="line"><span class="comment">// await之后的代码...</span></span><br><span class="line"><span class="comment">// await的结果 1</span></span><br></pre></td></tr></table></figure><p><strong>这里注意<code>await</code>关键字一定是在<code>async</code>定义的函数内部使用的，出了<code>async</code>定义的函数，使用<code>await</code>是无效的，也是不被允许的。</strong></p><p>通过以上代码的输出可以看出，testAsync 方法只有在<code>await</code> 之后的 Promise 执行完 resolve 之后，才会继续向下执行那两行打印语句。</p><p>为了解决上面说到的回调地狱，我们使用<code>async</code>定义异步函数，结合<code>await</code>等待异步执行结果，然后同步调用异步函数，于是改写如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">testAsync</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="built_in">this</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getComment1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      that.$axios(<span class="string">&#x27;https://jsonplaceholder.typicode.com/comments/1&#x27;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getComment2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      that.$axios(<span class="string">&#x27;https://jsonplaceholder.typicode.com/comments/2&#x27;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getComment3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      that.$axios(<span class="string">&#x27;https://jsonplaceholder.typicode.com/comments/3&#x27;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getComment4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      that.$axios(<span class="string">&#x27;https://jsonplaceholder.typicode.com/comments/4&#x27;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> comment1 = <span class="keyword">await</span> getComment1()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;comment1拿到了&#x27;</span>, comment1)</span><br><span class="line">  <span class="keyword">const</span> comment2 = <span class="keyword">await</span> getComment2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;comment2拿到了&#x27;</span>, comment2)</span><br><span class="line">  <span class="keyword">const</span> comment3 = <span class="keyword">await</span> getComment3()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;comment3拿到了&#x27;</span>, comment3)</span><br><span class="line">  <span class="keyword">const</span> comment4 = <span class="keyword">await</span> getComment4()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;comment4拿到了&#x27;</span>, comment4)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>至此，就解决了回调地狱的问题，当有多个请求时，也可以使用 async 和 await 写出高可读性的代码了。</p><p>参考文章：</p><p><a href="https://segmentfault.com/a/1190000007535316">https://segmentfault.com/a/1190000007535316</a></p><p><a href="https://www.jianshu.com/p/b4fd76c61dc9">https://www.jianshu.com/p/b4fd76c61dc9</a></p><p><a href="https://es6.ruanyifeng.com/#docs/promise">https://es6.ruanyifeng.com/#docs/promise</a></p>]]></content>
      
      
      <categories>
          
          <category> 查缺补漏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查缺补漏之正则表达式</title>
      <link href="/wangq1231/2021/06/06/%E2%96%93%D1%89%E2%95%9A%E2%96%92%E2%96%93%E2%95%A3%E2%94%AC%D0%B9%E2%95%93%D0%BE%E2%95%92%C2%A4%E2%95%98%D0%84%E2%96%92%D1%8D%E2%94%A4%D1%8F%E2%95%A9%E2%95%9C/"/>
      <url>/wangq1231/2021/06/06/%E2%96%93%D1%89%E2%95%9A%E2%96%92%E2%96%93%E2%95%A3%E2%94%AC%D0%B9%E2%95%93%D0%BE%E2%95%92%C2%A4%E2%95%98%D0%84%E2%96%92%D1%8D%E2%94%A4%D1%8F%E2%95%A9%E2%95%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><blockquote><p>首先要明白正则表达式可以干什么？</p><p>正则表达式是用于匹配字符串中字符组合的模式。简单的说就是比如你想知道一串数字是否是正确的手机号。就需要用到正则表达式。由于之前一直对正则表达式的知识比较薄弱，所以在此进行查缺补漏</p></blockquote><h3 id="一、创建一个正则表达式"><a href="#一、创建一个正则表达式" class="headerlink" title="一、创建一个正则表达式"></a>一、创建一个正则表达式</h3><p>创建一个正则表达式的方法有两种：</p><h4 id="字面量创建；"><a href="#字面量创建；" class="headerlink" title="字面量创建；"></a>字面量创建；</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regTest = <span class="regexp">/[a-z]/</span></span><br></pre></td></tr></table></figure><h4 id="使用构造函数创建"><a href="#使用构造函数创建" class="headerlink" title="使用构造函数创建"></a>使用构造函数创建</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regTest = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;[a-z]&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里就使用第一种简单字面量的方式来熟悉正则表达式相关知识。正则表达式的匹配方法有很多例如 exex()、test()、match()等。这里主要熟悉正则的编写，方法先不做介绍。能看懂下面的匹配方法就行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> helloReg = <span class="regexp">/Hello/</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">helloReg.test(str) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="二、正则表达式修饰符"><a href="#二、正则表达式修饰符" class="headerlink" title="二、正则表达式修饰符"></a>二、正则表达式修饰符</h3><p>修饰符是在字面量的结尾加上的参数。或是用构造函数创建的对象第二个参数。如:<code>new RegExp(&#39;[a-z]&#39;, i);</code></p><table><thead><tr><th align="left">修饰符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">执行对大小写不敏感的匹配。</td></tr><tr><td align="left">g</td><td align="left">执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td align="left">m</td><td align="left">执行多行匹配。</td></tr></tbody></table><h3 id="三、正则表达式中的特殊字符"><a href="#三、正则表达式中的特殊字符" class="headerlink" title="三、正则表达式中的特殊字符"></a>三、正则表达式中的特殊字符</h3><h4 id="断言类"><a href="#断言类" class="headerlink" title="断言类"></a>断言类</h4><p>表示一个匹配在某些条件下发生。断言包含先行断言、后行断言和条件表达式。</p><table><thead><tr><th>特殊字符</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>匹配输入的开头。（或对后面的校验取反）</td></tr><tr><td>$</td><td>匹配输入的结束。</td></tr></tbody></table><h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h4><p>区分不同类型的字符，例如区分字母和数字。</p><table><thead><tr><th>特殊字符</th><th align="center">含义</th></tr></thead><tbody><tr><td>.</td><td align="center">默认匹配除换行符之外的任何单个字符。例如，<code>/.n/</code> 将会匹配 “nay, an apple is on the tree” 中的 ‘an’ 和 ‘on’，但是不会匹配 ‘nay’。</td></tr><tr><td>\b</td><td align="center">匹配一个单词的边界，即匹配两边中的一边没有其他元素或者空格。例如：/123\b/匹配’123 456’中的’123’</td></tr><tr><td>\B</td><td align="center">匹配非单词边界，例如<code>/\Bpple/</code>匹配”apple”中的“pple”</td></tr><tr><td>\d</td><td align="center">匹配任何数字(阿拉伯数字)。 相当于 <code>[0-9]</code>. 例如, <code>/\d/</code> 或 <code>/[0-9]/</code> 匹配 “B2is the suite number”中的“2”。</td></tr><tr><td>\D</td><td align="center">匹配任何非数字(阿拉伯数字)的字符。相当于<code>[^0-9]</code>. 例如, <code>/\D/</code> or <code>/[^0-9]/</code> 在 “B2 is the suite number” 中 匹配 “B”.</td></tr><tr><td>\n</td><td align="center">匹配换行符。例如<code>/\n/g</code>匹配”I am a boy. \n “中的换行符</td></tr><tr><td>\w</td><td align="center">匹配基本拉丁字母中的任何字母数字字符，包括下划线。相当于 <code>[A-Za-z0-9_]</code>.</td></tr><tr><td>\W</td><td align="center">匹配任何不是来自基本拉丁字母的单词字符。相当于 <code>[^A-Za-z0-9_]</code>.</td></tr><tr><td>\s</td><td align="center">匹配空白字符。例如<code>/\s/g</code>匹配”I am a boy”中的所有空格</td></tr><tr><td>\S</td><td align="center">匹配非空白字符。例如<code>/\S/g</code>匹配”I am a boy“中的所有字母</td></tr></tbody></table><h4 id="量词类"><a href="#量词类" class="headerlink" title="量词类"></a>量词类</h4><p>量词表示要匹配的字符或表达式的数量。</p><table><thead><tr><th>特殊字符</th><th>含义</th></tr></thead><tbody><tr><td>x*</td><td>将前面的项“x”匹配 0 次或更多次。等价于 <code>&#123;0,&#125;</code>例如/bo*/匹配“A ghost booooed”中的“boooo”</td></tr><tr><td>x+</td><td>将前一项“x”匹配 1 次或更多次。等价于<code>&#123;1,&#125;</code>。例如，/a+/匹配“candy”中的“a”和“caaaaaaandy”中的“a”。</td></tr><tr><td><em>x</em>?</td><td>将前面的项“x”匹配 0 或 1 次。等价于 <code>&#123;0,1&#125;</code>。</td></tr><tr><td><em>x</em>{<em>n</em>}</td><td>其中“n”是一个正整数，与前一项“x”的 n 次匹配。例如，<code>/a&#123;2&#125;/ </code>不匹配“candy”中的“a”，但它匹配“caandy”中的所有“a”，以及“caaandy”中的前两个“a”。</td></tr><tr><td><em>x</em>{<em>n</em>,}</td><td>其中，“n”是一个正整数，与前一项“x”至少匹配“n”次。例如，<code>/a&#123;2，&#125;/</code>不匹配“candy”中的“a”，但匹配“caandy”和“caaaaaaandy”中的所有 a。</td></tr><tr><td><em>x</em>{<em>n</em>,<em>m</em>}</td><td>其中，“n”是 0 或一个正整数，“m”是一个正整数，且 m &gt; n 至少与前一项“x”匹配，最多与“m”匹配。</td></tr><tr><td>?=n</td><td>匹配任何其后紧接指定字符串 n 的字符串。例如<code>/is(?= all)/g </code>匹配 “There is all” 中的 “is all”</td></tr><tr><td>?!n</td><td>匹配任何其后没有紧接指定字符串 n 的字符串。例如<code>/is(?! all)/gi </code>匹配 “Is there all?” 中的 “Is“</td></tr></tbody></table><h4 id="括号类"><a href="#括号类" class="headerlink" title="括号类"></a>括号类</h4><table><thead><tr><th>括号</th><th>含义</th></tr></thead><tbody><tr><td>()</td><td>小括号用于对字符或元字符进行分组以及表示可选择性。如(A\d){1,3}和(red|green)</td></tr><tr><td>[]</td><td>方括号用于查找某个范围内的字符。例如<code>[0-9]、[a-z]、[A-D]</code></td></tr><tr><td>{}</td><td>大括号用于标记限定符表达式的开始。如<code>n&#123;1,9&#125;</code>匹配 X 至 Y 个 n 的序列的字符串。</td></tr></tbody></table><h3 id="四、实现几个常用的正则表达式"><a href="#四、实现几个常用的正则表达式" class="headerlink" title="四、实现几个常用的正则表达式"></a>四、实现几个常用的正则表达式</h3><h4 id="手机号"><a href="#手机号" class="headerlink" title="手机号"></a>手机号</h4><p>手机号的校验分为以下几个部分：</p><p>①11 位数字，不能多也不能少；得到如下<code>/\d&#123;11&#125;/</code></p><p>② 第一位数字必须为 1，第二位为 3，4，5，6，7，8，9 中的一个；得到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^<span class="number">1</span>[<span class="number">3</span>-<span class="number">9</span>]&#123;<span class="number">1</span>&#125;\d&#123;<span class="number">9</span>&#125;$/</span><br></pre></td></tr></table></figure><p>③ 注意不要忘了用上<code>^</code>匹配开始和<code>$</code>匹配结尾。不然超过 11 位的也会被校验成功</p><h4 id="身份证号"><a href="#身份证号" class="headerlink" title="身份证号"></a>身份证号</h4><p>身份证号的校验分为以下几个部分：</p><p>① 地区的前两位为省级；第一位为 1-9，第二位为 0-9；三四位为市级，五六位为县级。得到<code>[1-9]&#123;1&#125;\d&#123;5&#125;</code></p><p>② 出生年月日一共 8 位；年份从 18XX 开始，到目前 20XX(看到网上很多是校验到 3XXX，这里以我个人的理解先校验到 20XX)；得到如下<code>(18|19|20)\d&#123;2&#125;</code>。</p><p>月份 01~12；<code>((0[1-9])|(10|11|12))</code>。</p><p>日期 01~31；<code>((0[1-9])|1\d&#123;1&#125;|2\d&#123;1&#125;|3[01])</code>。</p><p>③ 顺序码；<code>\d&#123;3&#125;</code>，校验码<code>(\d|X|x)</code></p><p>④ 最后讲上面所有的检验结合得到如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[<span class="number">1</span>-<span class="number">9</span>]&#123;<span class="number">1</span>&#125;\d&#123;<span class="number">5</span>&#125;(<span class="number">18</span>|<span class="number">19</span>|<span class="number">20</span>)\d&#123;<span class="number">2</span>&#125;((<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>])|(<span class="number">10</span>|<span class="number">11</span>|<span class="number">12</span>))((<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>])|<span class="number">1</span>\d&#123;<span class="number">1</span>&#125;|<span class="number">2</span>\d&#123;<span class="number">1</span>&#125;|<span class="number">3</span>[<span class="number">01</span>])\d&#123;<span class="number">3</span>&#125;(\d|X|x)$/</span><br></pre></td></tr></table></figure><p>当然光靠正则的校验不够完善，比如 2 月份只有 28 天的情况，或者 29 天的情况。这里没有做到控制。更完善的校验需要编写一个方法来实现。</p><h4 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h4><p>邮箱的校验分为以下几个部分：</p><p>① 只允许英文字母、数字、下划线、英文句号、以及中划线；<code>([a-zA-Z0-9._-])+</code></p><p>②@符号；<code>@</code></p><p>③ 域名：一般域名的规律为“[N 级域名.][三级域名.]二级域名.顶级域名”，比如“ qq.com ”、“ <a href="http://www.qq.com/">www.qq.com</a> ”、“ mp.weixin.qq.com ”、“ 12-34.com.cn ”，分析可得域名类似“ <code>**</code> <code>.**</code> <code>.**</code> <code>.**</code> ”组成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`**`</span> 可表示为：([a-zA-Z0-9_-])+</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`.**`</span> 可表示为：(.[a-zA-Z0-9_-]&#123;<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`**.**.**.**`</span> 得到：([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]&#123;<span class="number">2</span>,<span class="number">3</span>&#125;))&#123;<span class="number">1</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>④ 讲上述上个结合得到：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/^([a-zA-Z0-<span class="number">9.</span>_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]&#123;<span class="number">2</span>,<span class="number">3</span>&#125;))&#123;<span class="number">1</span>,<span class="number">3</span>&#125;$/</span><br><span class="line"><span class="comment">// 根据特殊字符 \w 相当于 `[A-Za-z0-9_]`。于是可以用以下正则代替上行</span></span><br><span class="line"><span class="regexp">/^[\w.-]+@[\w-]+(.[\w-]&#123;2,3&#125;)&#123;1,3&#125;$/</span></span><br></pre></td></tr></table></figure><h4 id="强密码-必须包含大小写字母和数字的组合，长度在-8-16-之间"><a href="#强密码-必须包含大小写字母和数字的组合，长度在-8-16-之间" class="headerlink" title="强密码(必须包含大小写字母和数字的组合，长度在 8-16 之间)"></a>强密码(必须包含大小写字母和数字的组合，长度在 8-16 之间)</h4><p>强密码校验分为以下几个部分：</p><p>① 长度 8-16 位{8,16}</p><p>② 包含大小写字母和数字[a-zA-Z0-9]{8,16}</p><p>③ 确保同时含有字母和数字？</p><p>这里使用<code>(?=.*\d)(?=.*[a-z])(?=.*[A-Z])</code> 来匹配当前式子同时含有大小写字母和数字。其中 <code> (?=)</code> 是用来预测后续的内容与当前表达式匹配。<strong>参见第三点的量词类倒数第二个</strong>。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。这里使用了三个预测先行<code>(?=)(?=)(?=)</code>也就是说需要同时满足三个匹配条件。</p><p>④ 最终得出结果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-<span class="number">9</span>]&#123;<span class="number">8</span>,<span class="number">16</span>&#125;/</span><br></pre></td></tr></table></figure><h3 id="更多内容待续……"><a href="#更多内容待续……" class="headerlink" title="更多内容待续……"></a>更多内容待续……</h3>]]></content>
      
      
      <categories>
          
          <category> 查缺补漏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS读取用户命令行的输入</title>
      <link href="/wangq1231/2021/06/05/JS%E2%95%A2%E2%94%B4%E2%95%9A%D0%B1%E2%95%99%E2%94%9C%E2%95%97%D0%B7%E2%95%90%D0%B8%E2%95%A3%C2%A4%E2%94%9C%E2%84%96%E2%94%B4%D1%8E%E2%95%A8%E2%95%A8%E2%95%A9%D1%84%E2%95%9A%D1%8B%E2%95%A1%E2%94%80%E2%95%A8%E2%94%BC%E2%95%A7%D0%B2/"/>
      <url>/wangq1231/2021/06/05/JS%E2%95%A2%E2%94%B4%E2%95%9A%D0%B1%E2%95%99%E2%94%9C%E2%95%97%D0%B7%E2%95%90%D0%B8%E2%95%A3%C2%A4%E2%94%9C%E2%84%96%E2%94%B4%D1%8E%E2%95%A8%E2%95%A8%E2%95%A9%D1%84%E2%95%9A%D1%8B%E2%95%A1%E2%94%80%E2%95%A8%E2%94%BC%E2%95%A7%D0%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><blockquote><p>这阵子在看牛客网上看一些编程题，发现有一部分的编程题是需要读取用户输入，并输出结果的。在我开发前端以来，使用 JS 读取用户输入的内容好像从没用过。所以一开始的我一头雾水。网上有介绍说 Node 的方法 readline 可以逐行读取用户输入信息。于是便在此对 readline 方法进行总结</p></blockquote><h3 id="readline-使用"><a href="#readline-使用" class="headerlink" title="readline 使用"></a>readline 使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引入readline模块</span></span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.创建 Interface 类的实例</span></span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">  <span class="attr">input</span>: process.stdin, <span class="comment">// 输入的流</span></span><br><span class="line">  <span class="attr">output</span>: process.stdout, <span class="comment">// 输出的流</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 监听line事件，读取用户输入的一行内容(用户敲回车键之前的所有内容)</span></span><br><span class="line">rl.on(<span class="string">&#x27;line&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// input便是用户输入的一行内容</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`接收到：<span class="subst">$&#123;input&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>用户输入的内容通过上述代码便可以获取到了。而在编程题中还需要得到输出，通常情况下 console.log()在控制台打印的结果也就是输出的结果。也就是说在上面的代码中 console.log()内放置你实现的函数代码。将用户输入作为参数传递就可以了。<br>这里贴上我实现的一道最小公倍数的数学题方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">  <span class="attr">input</span>: process.stdin,</span><br><span class="line">  <span class="attr">output</span>: process.stdout,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">rl.on(<span class="string">&#x27;line&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> nums = line.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(getMinNum(<span class="built_in">parseInt</span>(nums[<span class="number">0</span>]), <span class="built_in">parseInt</span>(nums[<span class="number">1</span>])))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过num1和num2，返回num1和num2的最小公倍数</span></span><br><span class="line"><span class="comment"> * 例：5 7  输出35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> <span class="variable">num1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> <span class="variable">num2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getMinNum = <span class="function"><span class="keyword">function</span> (<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> aIn = [],</span><br><span class="line">    bIn = [],</span><br><span class="line">    maxIn = <span class="number">0</span>,</span><br><span class="line">    maxNum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.sqrt(num1)); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num1 % i === <span class="number">0</span>) &#123;</span><br><span class="line">      aIn.push(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.sqrt(num2)); j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num2 % j === <span class="number">0</span>) &#123;</span><br><span class="line">      bIn.push(j)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> length = <span class="built_in">Math</span>.min(aIn.length, bIn.length)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> p = <span class="number">0</span>; p &lt; length; p++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (aIn[p] === bIn[p]) &#123;</span><br><span class="line">      maxIn = aIn[p]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  maxNum = (num1 / maxIn) * (num2 / maxIn) * maxIn</span><br><span class="line">  <span class="keyword">return</span> maxNum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在读取用户输入内容的过程中，程序不会停止，也就是在命令行里一直监听用户的输入。想要关闭监听用户的输入，可以使用 rl 的 close 方法:</p><p><code>rl.close()</code></p>]]></content>
      
      
      <categories>
          
          <category> 面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP与HTTPS的介绍</title>
      <link href="/wangq1231/2021/05/24/HTTP%E2%95%99%D1%8BHTTPS%E2%95%A1%E2%94%80%E2%95%9C%D1%89%E2%95%94%E2%96%84/"/>
      <url>/wangq1231/2021/05/24/HTTP%E2%95%99%D1%8BHTTPS%E2%95%A1%E2%94%80%E2%95%9C%D1%89%E2%95%94%E2%96%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><h3 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h3><h4 id="一、什么是-HTTP-协议？"><a href="#一、什么是-HTTP-协议？" class="headerlink" title="一、什么是 HTTP 协议？"></a>一、什么是 HTTP 协议？</h4><ul><li><p>HTTP 是一个用在计算机世界里的协议。它使用计算机能够理解的语言确立了一种计算机之间交流通信的规范（两个以上的参与者），以及相关的各种控制和错误处理方式（行为约定和规范）。</p></li><li><p>HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。</p></li></ul><h4 id="二、HTTP-常见的状态码"><a href="#二、HTTP-常见的状态码" class="headerlink" title="二、HTTP 常见的状态码"></a>二、HTTP 常见的状态码</h4><ol><li><p> 1XX 类状态码属于提示信息，是协议处理中的一种中间状态，实际用到的比较少。</p></li><li><p>2XX 类状态码表示服务器成功处理了客户端的请求，也是我们最愿意看到的状态。</p><ul><li><strong>「200 OK」是最常见的成功状态码，表示一切正常。如果是非 HEAD 请求，服务器返回的响应头都会有 body 数据。</strong></li><li>「204 No Content」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。</li><li>「206 Partial Content」是应用于 HTTP 分块下载或断电续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。</li></ul></li><li><p>3XX 类状态码表示客户端请求的资源发生了变动，需要客户端用新的 URL 重新发送请求，也就是重定向</p><ul><li>「301 Moved Permanently」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。</li><li>「302 Moved Temporary」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。</li><li><strong>301 和 302 都会在响应头里使用字段 Location，指明后续要跳转的 URL，浏览器会自动重定向新的 URL。</strong></li><li>「304 Not Modified」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，用于缓存控制。</li></ul></li><li><p>4XX 类状态码表示客户端发送的报文有误，服务器无法处理，错误码</p><ul><li>「400 Bad Request」表示客户端请求的报文有错误，但只是个笼统的错误。</li><li>「403 Forbidden」表示服务器禁止访问资源，并不是客户端的请求出错。</li><li><strong>「404 Not Found」表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。</strong></li></ul></li><li><p>5XX 类状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务端的错误码</p><ul><li><p>「500 Internal Server Error」与 400 类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。</p></li><li><p>「501 Not Implemented」表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。</p></li><li><p><strong>「502 Bad Gateway」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。</strong></p></li><li><p><strong>「503 Service Unavailable」表示服务器当前很忙，暂时无法响应服务器，类似“网络服务正忙，请稍后重试”的意思。</strong></p></li></ul></li></ol><h4 id="三、HTTP-常见的字段"><a href="#三、HTTP-常见的字段" class="headerlink" title="三、HTTP 常见的字段"></a>三、HTTP 常见的字段</h4><ol><li><p>Host 字段，客户端发送请求时，用来指定服务端的域名</p></li><li><p>Content-Length 字段，服务器在返回数据时，会有 Content-Length 字段，表明本次回应的数据长度。</p></li><li><p>Content-Type 字段，用于服务器回应客户端时，告诉客户端当前数据是什么格式的。</p><ul><li>Content-Type: application/json; charset=utf-8</li><li>Content-Type: text/html; charset=utf-8</li><li>客户端请求的时候，可以使用 Accept 字段声明自己可以接受哪些数据格式。</li><li>Accept: _ / _ 表示可以接受任意格式的数据</li></ul></li><li><p>Connection 字段，常用于客户端要求服务端使用 TCP 持久连接，以便其他请求复用。</p><ul><li>Connection: keep-alive</li></ul></li><li><p>Content-Encoding 字段</p><ul><li><p>Content-Encoding 字段说明数据的压缩方法。表示服务器返回的数据使用了什么压缩格式</p></li><li><p>Content-Encoding: gzip. 表示服务器返回的数据采用了 gzip 方式压缩，告知客户端需要用此方式解压。</p></li><li><p>客户端在请求时，用 Accept-Encoding 字段说明自己可以接受哪些压缩方法。</p></li><li><p>Accept-Encoding: gzip, deflate</p></li></ul></li></ol><h4 id="四、HTTP-1-1-的性能"><a href="#四、HTTP-1-1-的性能" class="headerlink" title="四、HTTP/1.1 的性能"></a>四、HTTP/1.1 的性能</h4><ul><li>HTTP 协议是基于 TCP/IP，并且使用了「请求 - 应答」的通信模式，所以性能的关键就在这两点里。</li><li>长连接<ol><li>早期 HTTP/1.0 性能上有一个很大的问题，就是每发起一次请求，都要新建立一次 TCP 连接(三次握手)，而且是串行通信，做了无畏的连接建立和断开，增加了通信开销。</li><li>为了解决上述 TCP 连接问题，HTTP/1.1 提出了长连接的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。</li><li>持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。<img src= "/wangq1231/img/loading.gif" data-lazy-src="/assets/blogImg/https1.jpg"></li></ol></li></ul><h4 id="五、HTTP-与-HTTPS-的区别"><a href="#五、HTTP-与-HTTPS-的区别" class="headerlink" title="五、HTTP 与 HTTPS 的区别"></a>五、HTTP 与 HTTPS 的区别</h4><ol><li><p>HTTP 是超文本传输协议，信息是明文传输，存在安全风险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输。</p></li><li><p>HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。而 HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。</p></li><li><p>HTTP 的端口号是 80，HTTPS 的端口号是 443。</p></li><li><p>HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。</p></li></ol><p><img src= "/wangq1231/img/loading.gif" data-lazy-src="/assets/blogImg/https.jpg"><br>​ HTTP 与 HTTPS 的区别</p><p><img src= "/wangq1231/img/loading.gif" data-lazy-src="/assets/blogImg/https2.jpg"><br>​ HTTP/1.1 与 HTTPS 与 HTTP/2 的区别</p><p><img src= "/wangq1231/img/loading.gif" data-lazy-src="/assets/blogImg/https3.jpg"><br>​ HTTP/1.1 与 HTTPS 与 HTTP/2 与 HTTP/3 的区别</p>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现登录功能的加密与解密</title>
      <link href="/wangq1231/2021/05/08/%E2%95%AB%D0%B2%E2%96%93%D1%81%E2%95%99%D1%8B%E2%95%A1%E2%95%9F%E2%94%AC%E2%95%9D%E2%95%A1%E2%94%80%E2%95%9D%E2%95%99%E2%94%9C%E2%96%84%E2%95%99%D1%8B%E2%95%9C%D1%82%E2%94%9C%E2%96%84/"/>
      <url>/wangq1231/2021/05/08/%E2%95%AB%D0%B2%E2%96%93%D1%81%E2%95%99%D1%8B%E2%95%A1%E2%95%9F%E2%94%AC%E2%95%9D%E2%95%A1%E2%94%80%E2%95%9D%E2%95%99%E2%94%9C%E2%96%84%E2%95%99%D1%8B%E2%95%9C%D1%82%E2%94%9C%E2%96%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><br><h3 id="加密算法：-MD5"><a href="#加密算法：-MD5" class="headerlink" title="加密算法： MD5"></a>加密算法： MD5</h3><h3 id="用到的-java-工具类：-DigestUtils地址"><a href="#用到的-java-工具类：-DigestUtils地址" class="headerlink" title="用到的 java 工具类： DigestUtils地址"></a>用到的 java 工具类： DigestUtils<a href="http://commons.apache.org/proper/commons-codec/apidocs/org/apache/commons/codec/digest/DigestUtils.html">地址</a></h3><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><h4 id="首先在-SpringBoot-的-pom-xml-文件中添加依赖"><a href="#首先在-SpringBoot-的-pom-xml-文件中添加依赖" class="headerlink" title="首先在 SpringBoot 的 pom.xml 文件中添加依赖"></a>首先在 SpringBoot 的 pom.xml 文件中添加依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- MD5加密依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-codec&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="然后添加一个工具类-MD5Utils-class-内容如下"><a href="#然后添加一个工具类-MD5Utils-class-内容如下" class="headerlink" title="然后添加一个工具类 MD5Utils.class 内容如下"></a>然后添加一个工具类 MD5Utils.class 内容如下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"></span><br><span class="line">public class MD5Utils &#123;</span><br><span class="line">    public static String md5(String src) &#123;</span><br><span class="line">        return DigestUtils.md5Hex(src);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static final String salt = &quot;1a2b3c4d&quot;;</span><br><span class="line"></span><br><span class="line">    public static String inputPassToFormPass(String inputPass) &#123;</span><br><span class="line">        String str = inputPass + salt;</span><br><span class="line">        return md5(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //编写主类进行测试</span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">        String s = &quot;aabbcc&quot;;</span><br><span class="line">        System.out.println(&quot;加密前：&quot; + s);</span><br><span class="line">        System.out.println(&quot;加密后：&quot;+MD5Utils.inputPassToFormPass(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最后在注册时，对密码进行加密"><a href="#最后在注册时，对密码进行加密" class="headerlink" title="最后在注册时，对密码进行加密"></a>最后在注册时，对密码进行加密</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.setPassword(MD5Utils.inputPassToFormPass(user.getPassword()));</span><br></pre></td></tr></table></figure><h4 id="登录时亦是如此即可"><a href="#登录时亦是如此即可" class="headerlink" title="登录时亦是如此即可"></a>登录时亦是如此即可</h4>]]></content>
      
      
      <categories>
          
          <category> 技能提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> MD5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目问题总结(持续更新)</title>
      <link href="/wangq1231/2021/03/16/%E2%95%A7%D1%8E%E2%94%80%E2%94%90%E2%95%AC%E2%95%A9%E2%95%A0%D1%82%E2%95%AB%E2%96%84%E2%95%9C%D1%81-%E2%94%82%E2%95%93%E2%95%A8%C2%B0%E2%95%95%E2%84%96%E2%95%A8%E2%94%AC/"/>
      <url>/wangq1231/2021/03/16/%E2%95%A7%D1%8E%E2%94%80%E2%94%90%E2%95%AC%E2%95%A9%E2%95%A0%D1%82%E2%95%AB%E2%96%84%E2%95%9C%D1%81-%E2%94%82%E2%95%93%E2%95%A8%C2%B0%E2%95%95%E2%84%96%E2%95%A8%E2%94%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><br><h2 id="2021-03-16-更新"><a href="#2021-03-16-更新" class="headerlink" title="2021-03-16 更新"></a>2021-03-16 更新</h2><h3 id="1-旋转元素遇到的问题"><a href="#1-旋转元素遇到的问题" class="headerlink" title="1.旋转元素遇到的问题"></a>1.旋转元素遇到的问题</h3><p>想要某块元素实现旋转，通常情况下使用 css 的 transform 属性设置<code>rotate(角度deg)</code>即可。如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  // 使用<span class="attribute">transform</span>旋转</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>); <span class="comment">/* IE 9 */</span></span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>); <span class="comment">/* Safari and Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是很多情况下，我们使用了旋转后发现效果并不是期待的那样，也许就需要用到我接下来说的属性来解决。</p><span id="more"></span><p>rotate 旋转属性默认都是以自身元素的中心为圆心来旋转，如下图。如果我们希望它不是围绕自身元素的中心旋转，这时就需要 transform-origin 属性来修改旋转圆心（这里只介绍 transform-origin 两个参数 2d 平面的旋转用法。3 个参数的 3d 用法暂不考虑）<br><img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2021031609450581.gif" alt="在这里插入图片描述"></p><p>我们希望黄色区域旋转 90 度后与白色区域重叠，就需要对旋转中心进行设置。将圆心设在如下位置后就可以达到效果<br><img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210316094521551.gif" alt="在这里插入图片描述"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* transform-origin的使用语法 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>)</span><br><span class="line">transform-origin: x-axis y-axis;</span><br><span class="line">-ms-<span class="attribute">transform-origin</span>: x-axis y-axis;</span><br><span class="line">-webkit-<span class="attribute">transform-origin</span>: x-axis y-axis;</span><br><span class="line">-moz-<span class="attribute">transform-origin</span>: x-axis y-axis;</span><br><span class="line">// 可取的值</span><br><span class="line">x-axis： <span class="attribute">left</span>、center、<span class="attribute">right</span>、length、%</span><br><span class="line">y-axis： <span class="attribute">top</span>、center、<span class="attribute">bottom</span>、length、%</span><br></pre></td></tr></table></figure><p>以上面的实例来说，只需要设置黄色区域的样式内容如下即可达到想要的结果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">  <span class="attribute">transform-origin</span>: 外部div宽度的一半 <span class="number">50%</span>;</span><br><span class="line">  -ms-<span class="attribute">transform-origin</span>: 外部div宽度的一半 <span class="number">50%</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform-origin</span>: 外部div宽度的一半 <span class="number">50%</span>;</span><br><span class="line">  -moz-<span class="attribute">transform-origin</span>: 外部div宽度的一半 <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="2-移动端设备横竖屏切换时字体大小的问题"><a href="#2-移动端设备横竖屏切换时字体大小的问题" class="headerlink" title="2.移动端设备横竖屏切换时字体大小的问题"></a>2.移动端设备横竖屏切换时字体大小的问题</h3><p>做移动端的项目时，发横竖屏切换浏览器会默认改变 html 元素的 font-size 属性，导致横屏时的字体会比竖屏时的字体看起来更大。</p><p>仔细对比发现，<strong>在横屏时字体的大小和竖屏时字体的大小比例等于移动设备的屏幕高度比上宽度。简言之，如果移动设备的高度是宽度的两倍，那么横屏时的字体就会是竖屏时的字体的两倍大小。</strong> 这样的用户体验相对较差，于是便想要解决这个问题。</p><p>在网上搜了解决方案。大多看到的都是说给 body 添加如下样式:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  -webkit-text-size-adjust: none;</span><br><span class="line">  -moz-text-size-adjust: none;</span><br><span class="line">  -ms-text-size-adjust: none;</span><br><span class="line">  text-size-adjust: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 MDN 官网查找了该 text-size-adjust 属性，官网介绍为：<img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210316101926446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzUyNjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我在当前项目尝试该解决办法后发现并不能生效，横屏时的字体还是会比竖屏时字体更大。</p><p>于是我想或许可以给 html 元素添加一个固定大小的 font-size 值，让它横屏时也和竖屏一样大小。但我设置后发现，在代码里写的是 <code>font-size: 37.5px</code> 但是到浏览器打开后会变成 <code>font-size: 1rem</code> 并且字体看起来比竖屏时还要小。</p><p>为了弄清楚 rem 和 px 的区别。看了网上的介绍后，大致总结为如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>px是绝对单位，代表像素。</span><br><span class="line"><span class="number">2.</span>rem是相对单位，相对的是根元素的大小。也就是html元素的大小</span><br><span class="line"><span class="number">3.</span>默认情况下html的字体大小 1rem = 16px</span><br><span class="line">更多的内容可以查看 (http:<span class="comment">//caibaojian.com/rem-and-px.html)</span></span><br></pre></td></tr></table></figure><p>设置固定 px 是行不通了。但是我们从以上知道，横屏时默认转换为 1rem 代表的是 16px。竖屏时是 37.5px。那么只需要设置横屏时 html 的 font-size 为 <code>37.5/16 = 2.34 rem</code> 即可。</p><h4 id="拓展字体大小单位"><a href="#拓展字体大小单位" class="headerlink" title="拓展字体大小单位 %"></a>拓展字体大小单位 %</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。</span><br><span class="line">那么12px=<span class="number">0.</span>75em,10px=<span class="number">0.</span>625em。为了简化font-size的换算，需要在css中</span><br><span class="line">的body选择器中声明font-size=<span class="number">62.5</span>%，这就使em值变为 16px*<span class="number">62.5</span>%=10px,</span><br><span class="line">这样12px=<span class="number">1.</span>2em, 10px=1em, 也就是说只需要将你的原来的px数值除以<span class="number">10</span>，</span><br><span class="line">然后换上em作为单位就行了。</span><br></pre></td></tr></table></figure><p>从以上信息可以知道字体的大小关系： <code>16px = 100%</code> 那么我想要设置字体大小为 37.5px。只需要知道 37.5px 和 16px 的比值，然后将这个比值设置为 html 的 font-size 的百分比大小，那么横屏时的字体大小就和竖屏时字体大小一样为 37.5px 了。求解得出<code> 37.5/16 = 2.34375</code>；就约等于 234.38%。设置后横屏时的字体和竖屏时的字体看起来相差无几。</p><p>至此，通过以上两种方法都可以解决当前问题。</p><h3 id="3-js-中数组的-map-方法"><a href="#3-js-中数组的-map-方法" class="headerlink" title="3.js 中数组的 map 方法"></a>3.js 中数组的 map 方法</h3><h4 id="应用场景一："><a href="#应用场景一：" class="headerlink" title="应用场景一："></a>应用场景一：</h4><p>一个对象数组，想要将该对象中的一个或多个属性单独抽出来组成新的数组。使用 map 方法</p><p>举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">10</span>, <span class="attr">c</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">2</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">30</span>, <span class="attr">c</span>: <span class="number">6</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> abs = array.map(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: e.a,</span><br><span class="line">    <span class="attr">b</span>: e.b,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// abs   [&#123;a: 1, b: 10&#125;, &#123;a: 2, b: 20&#125;, &#123;a: 3, b: 30&#125;]</span></span><br></pre></td></tr></table></figure><h4 id="应用场景二："><a href="#应用场景二：" class="headerlink" title="应用场景二："></a>应用场景二：</h4><p>一个对象数组，想要将该对象中的第一个键值对的值变成新数组对象中的键，第二个键值对的值变成新数组对象中的值。</p><p>举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">  &#123; <span class="attr">aaa</span>: <span class="string">&#x27;name&#x27;</span>, <span class="attr">bbb</span>: <span class="string">&#x27;Jhon&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">aaa</span>: <span class="string">&#x27;age&#x27;</span>, <span class="attr">bbb</span>: <span class="string">&#x27;20&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">aaa</span>: <span class="string">&#x27;sex&#x27;</span>, <span class="attr">bbb</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> abs = array.map(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">  obj[e.aaa] = e.bbb</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// abs  [&#123;name: &quot;Jhon&quot;&#125;, &#123;age: &quot;20&quot;&#125;, &#123;sex: &quot;male&quot;&#125;]</span></span><br></pre></td></tr></table></figure><p>更多 map 的用法可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">Array.prototype.map</a></p><p>更多内容待更新…</p><h2 id="2021-03-22-更新"><a href="#2021-03-22-更新" class="headerlink" title="2021-03-22 更新"></a>2021-03-22 更新</h2><h3 id="1-移动端浏览器上下滑动问题"><a href="#1-移动端浏览器上下滑动问题" class="headerlink" title="1.移动端浏览器上下滑动问题"></a>1.移动端浏览器上下滑动问题</h3><p>在开发移动端的时候，上下滑动屏幕会导致整个页面跟着手指上下滑动。（例如下拉到顶部时，继续下拉，页面会被继续下拉而顶部显示空白）虽说这个效果并不影响用户体验，但是在开发一个下拉功能的时候，发现影响很大。于是就要解决该问题</p><p>解决这个问题也很简单，就是阻止默认事件。如下代码所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(</span><br><span class="line"><span class="string">&quot;touchmove&quot;</span>,</span><br><span class="line">func,</span><br><span class="line">&#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;</span><br><span class="line">); <span class="comment">// passive设置为true时，表示 listener 永远不会调用 preventDefault()。这里设置为false。用来兼容ios和Android都可以生效</span></span><br></pre></td></tr></table></figure><p>阻止默认事件后会让整个页面内的滚动事件都无法加载。这个处理方法也很简单，只需要移除这个阻止默认事件的监听即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.removeEventListener(</span><br><span class="line"><span class="string">&quot;touchmove&quot;</span>,</span><br><span class="line">func,</span><br><span class="line">&#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-vue-项目中-img-的-src-属性设置"><a href="#2-vue-项目中-img-的-src-属性设置" class="headerlink" title="2.vue 项目中 img 的 src 属性设置"></a>2.vue 项目中 img 的 src 属性设置</h3><p>在 vue 项目中，设置 v-for 循环显示多个图片，每个图片的 src 都是当前项目的 asserts 文件夹下的文件。通常默认都是使用如下方式来显示图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../asserts/images/logo.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>但是当我们将 src 属性的值设置为 data 中的变量后，这样引用就会无法在页面上显示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;img :src=&quot;imgSrc&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      imgSrc: &#x27;../../asserts/images/logo.png&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>解决办法：</p><blockquote><p>1.把图片放在 src 同级的 static 文件夹下。 2.把图片放在 cdn 上，把网络地址存在 imgUrl 里，然后直接<img :src="imgUrl">去展示。 3.图片放在 assets 文件夹，然后在 data 里面 require 进图片</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站上线部署流程</title>
      <link href="/wangq1231/2021/03/02/%E2%95%90%C2%B0%E2%95%92%E2%95%9B%E2%95%94%E2%95%A7%E2%95%A7%E2%96%80%E2%96%93%E2%94%90%E2%95%A9%D0%81%E2%94%B4%D1%9E%E2%94%82%E2%95%A0/"/>
      <url>/wangq1231/2021/03/02/%E2%95%90%C2%B0%E2%95%92%E2%95%9B%E2%95%94%E2%95%A7%E2%95%A7%E2%96%80%E2%96%93%E2%94%90%E2%95%A9%D0%81%E2%94%B4%D1%9E%E2%94%82%E2%95%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><br><h3 id="1-服务器购买"><a href="#1-服务器购买" class="headerlink" title="1.服务器购买"></a>1.服务器购买</h3><p>国内服务器： <a href="https://www.aliyun.com/product/ecs">阿里云 ECS(Elastic Compute Service)</a>， <a href="https://buy.cloud.tencent.com/cvm">腾讯云 CVM(Cloud Virtual Machine)</a>等</p><p>国外服务器：<a href="https://www.vultr.com/">日本[Vultr]</a>，美国 Linode，谷歌云，微软 Azure，亚马逊 AWS 等</p><p>这一步需要创建好服务器实例，分配好公网 IP 地址。</p><h3 id="2-域名购买"><a href="#2-域名购买" class="headerlink" title="2.域名购买"></a>2.域名购买</h3><p>国内：阿里、腾讯等</p><p>国外：Godaddy</p><h3 id="3-域名解析-配置-DNS"><a href="#3-域名解析-配置-DNS" class="headerlink" title="3.域名解析(配置 DNS)"></a>3.域名解析(配置 DNS)</h3><p>注册好域名后需要将域名映射到自己服务器对应的 ip 地址，这样别人才能通过域名访问到我们的服务器。</p><p>这个步骤叫做域名解析，通过域名服务商提供的后台就可以操作，一般域名解析会有延迟，不是及时生效的。</p><span id="more"></span><h3 id="4-服务器环境搭建"><a href="#4-服务器环境搭建" class="headerlink" title="4.服务器环境搭建"></a>4.服务器环境搭建</h3><p><strong>这里我选择的是CentOS操作系统（其他系统命令不同）</strong></p><p>配置服务器， Mac 系统下直接使用终端就 ok</p><p>windows 系统下需要用到 git bash，或者别的工具(Putty)</p><p>需要用到的 Linux 系统操作命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 远程连接命令</span></span><br><span class="line">ssh root@域名</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 展示当前文件夹路径</span></span><br><span class="line">pwd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换文件夹目录</span></span><br><span class="line">cd 目录</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 展示当前文件夹中内容</span></span><br><span class="line">ls</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑文件</span></span><br><span class="line">vim 文件路径</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 传输文件</span></span><br><span class="line">scp 本地文件路径 root@域名:远程路径</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压文件命令</span></span><br><span class="line">unzipjs</span><br></pre></td></tr></table></figure><h4 id="4-1-安装-CentOS-开发人员相关包"><a href="#4-1-安装-CentOS-开发人员相关包" class="headerlink" title="4.1 安装 CentOS 开发人员相关包"></a>4.1 安装 CentOS 开发人员相关包</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall <span class="string">&#x27;Development tools&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-配置免密登录"><a href="#4-2-配置免密登录" class="headerlink" title="4.2 配置免密登录"></a>4.2 配置免密登录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在自己电脑上 生成本地 密钥对</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成的位置</span></span><br><span class="line"><span class="comment"># windows 在 C:\users\你的用户名\.ssh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在服务器创建一个 .ssh 文件夹</span></span><br><span class="line">mkdir .ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到这个文件夹</span></span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个文件</span></span><br><span class="line">touch authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把本地电脑生成的密钥对中 id_rsa_pub 文件中的内容放到 authorized_keys 文件中去</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDP0Ur7rojMdFqTDUQx56QuxeNbqbeCO6lQz9t3KZAWjjJhSG5v1TMhElunJg7HJtovIGlTDwrco9U36gF/nJ+66Gwzeme4eSwUYAu8D7XjFEfFvUPHwtSUDZKV9jtPPsoujUM9LnxvJ09buU0+xpOCE6LAR7e3vPRmrlolQc88b/JbH2A4lsXGIhGNNK/Z6M5LagD8KTNePLv7jc3kA2GZdUUze1wIVBjO21BTK90hfVbEGL0WREVh9RKR33jl7L5s8mnBbLJbsuk/Jk0C5ZNSKKCpFfDBsDQWYodyw1wI7gdpWuV8cH0CYz4xTRuOcIOv7sUjx9gbW09eNZnNOkDxpTvzPuP9CqKFSBma1xtnhhJYdw6b+xnoVPthUKhWzvp9ElQUtAGK+Xzauk5CxHyESZGGoA/YZQZ0U0rmoTrvG5JvnYOclDFMAIfe/pBJR5Ue6tlfBSMBWaHs61b334kAAUbtgF8TW9owH6lSZYsz2mS8nPF6a47bIwZwwsXmoWM= hua&#x27;wei@LAPTOP-4NR7HM4G&quot;</span> &gt;&gt; authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出服务器，下次就免密登录</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h4 id="4-3-安装-nginx"><a href="#4-3-安装-nginx" class="headerlink" title="4.3 安装 nginx"></a>4.3 安装 nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加nginx 源</span></span><br><span class="line">sudo yum install epel-release</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装nginx</span></span><br><span class="line">sudo yum install nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动nginx</span></span><br><span class="line">sudo systemctl start nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置防火墙规则</span></span><br><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=http</span><br><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4 id="4-4-安装-JDK（后端是-java-运行的）"><a href="#4-4-安装-JDK（后端是-java-运行的）" class="headerlink" title="4.4 安装 JDK（后端是 java 运行的）"></a>4.4 安装 JDK（后端是 java 运行的）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 在你的本地Windows系统中下载 Linux系统下的jdk，jdk下载官网https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html。</span></span><br><span class="line">下载你需要的jdk版本，我用的是 jdk-8u221-linux-x64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.下载完成后将安装包上传服务器</span></span><br><span class="line">使用winscp上传文件至 /usr/java</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.解压文件</span></span><br><span class="line">tar -zxvf /usr/java/jdk-8u221-linux-x64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.配置path</span></span><br><span class="line">cd /etc</span><br><span class="line">vim profile</span><br><span class="line">在profile文件中添加如下代码</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_221   # jdk解压后的路径</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib/</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.查看是否安装成功</span></span><br><span class="line">java -version</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-5-安装-MySQL（数据库）"><a href="#4-5-安装-MySQL（数据库）" class="headerlink" title="4.5 安装 MySQL（数据库）"></a>4.5 安装 MySQL（数据库）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载并安装MySQL 源</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">sudo yum localinstall mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证仓库是否添加成功</span></span><br><span class="line">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装MySQL</span></span><br><span class="line">sudo yum install mysql-community-server -y</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果上一步报错，执行下面的命令后再次执行上面的安装Mysql命令</span></span><br><span class="line">sudo yum module disable mysql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置 lower_case_table_names=1</span></span><br><span class="line">需要先修改配置文件，</span><br><span class="line">vi /etc/my.cnf</span><br><span class="line">[mysqld]  下增加</span><br><span class="line">lower_case_table_names=1</span><br><span class="line">注：如果不加这一行，mysql会区分数据库表的大小写。 0代表区分大小写，1代表不区分大小写。</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动MySQL</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl status mysqld</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到默认密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> MySQL安装完毕后会设置一个默认密码，我们需要找到默认密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接到MySQL数据库，修改密码</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改数据库密码 密码要求有大小写英文字母和数字</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Hehuang++0724&#x27;;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许远程连接</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use mysql;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select host,user,authentication_string,plugin from user;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> update user <span class="built_in">set</span> host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注：如果服务器防火墙未开，记得开放mysql的端口。另外安全组也需要开放mysql端口。</span></span><br></pre></td></tr></table></figure><h3 id="5-上传网站资源"><a href="#5-上传网站资源" class="headerlink" title="5.上传网站资源"></a>5.上传网站资源</h3><p>可以使用 scp 命令，也可以安装 FTP(winSCP、vsftpd)工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> scp 命令运行在本地电脑</span></span><br><span class="line">scp 本地文件 root@域名:远程路径</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在服务器创建文件夹</span></span><br><span class="line">mkdir /home/nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把网页文件移动到创建好的文件夹里</span></span><br><span class="line">mv ./dist.zip /home/nginx/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压压缩文件</span></span><br><span class="line">cd /home/nginx</span><br><span class="line">unzip ./dist.zip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改文件夹名字</span></span><br><span class="line">mv dist 文件夹名</span><br></pre></td></tr></table></figure><h3 id="6-配置-nginx"><a href="#6-配置-nginx" class="headerlink" title="6.配置 nginx"></a>6.配置 nginx</h3><p>创建一个配置文件 exam.conf （配置 nginx 服务）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/conf.d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建配置文件</span></span><br><span class="line">touch exam.conf</span><br><span class="line">vim exam.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按i键 进入编辑模式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入如下配置内容</span></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name www.yourdomain.com; # 服务器地址/域名地址</span><br><span class="line">location / &#123;</span><br><span class="line">root /home/nginx/exam; # 静态页面文件的路径</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存退出</span></span><br><span class="line">:wq</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新启动nginx服务</span></span><br><span class="line">sudo systemctl reload nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或 以下命令</span></span><br><span class="line">nginx -s reload</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看nginx状态</span></span><br><span class="line">sudo systemctl status nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止nginx服务</span></span><br><span class="line">sudo systemctl stop nginx</span><br></pre></td></tr></table></figure><h3 id="7-接口项目部署-java-项目"><a href="#7-接口项目部署-java-项目" class="headerlink" title="7. 接口项目部署(java 项目)"></a>7. 接口项目部署(java 项目)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动jar包</span></span><br><span class="line">java -jar /home/java/exam.jar  # 关闭后就停止运行了</span><br><span class="line">nohup java -jar /home/java/exam.jar &gt;exam.log 2&gt;&amp;1 &amp;  # 后台不停止运行</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看日志</span></span><br><span class="line">cat exam.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙才能访问springboot项目 查看其防火墙的状态：</span></span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭后就可以正常访问页面</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启防火墙</span></span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h3 id="Node-作为服务端："><a href="#Node-作为服务端：" class="headerlink" title="Node 作为服务端："></a>Node 作为服务端：</h3><h3 id="8-安装-Node-js-（后端是-Node-运行的）"><a href="#8-安装-Node-js-（后端是-Node-运行的）" class="headerlink" title="8.安装 Node.js （后端是 Node 运行的）"></a>8.安装 Node.js （后端是 Node 运行的）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum自带源中没有Node.js，所以首先要获取Node.js资源</span></span><br><span class="line">curl --silent --location https://rpm.nodesource.com/setup_14.x |bash -</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装Node.js</span></span><br><span class="line">yum install -y nodejs</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装完成后使用如下指令测试安装是否成功</span></span><br><span class="line">node -v</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装pm2 启动node.js项目</span></span><br><span class="line">pm2 start 文件名/id</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止</span></span><br><span class="line">pm2 stop 文件名/id</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从pm2列表 删除</span></span><br><span class="line">pm2 delete 文件名/id</span><br></pre></td></tr></table></figure><h3 id="9-Node-项目部署步骤（Node-项目）"><a href="#9-Node-项目部署步骤（Node-项目）" class="headerlink" title="9.Node 项目部署步骤（Node 项目）"></a>9.Node 项目部署步骤（Node 项目）</h3><p>1.修改配置项文件中的 mysql 数据库密码为服务器中数据库的密码 2.上传项目压缩文件到服务器 3.再服务器上解压项目文件到 /home/nginx/hlj 4.为项目安装依赖 npm i 5.修改 mysql 数据库 密码规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Hehuang++0724&#x27; PASSWORD EXPIRE NEVER;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;Hehuang++0724&#x27;;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看是否以及修改成功</span></span><br><span class="line">select user,host plugin from user where user=&#x27;root&#x27;;</span><br></pre></td></tr></table></figure><p>6.创建新的数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录数据口执行命令</span></span><br><span class="line">create database 数据库名称</span><br></pre></td></tr></table></figure><p>7.在之前的 nginx 配置文件中添加反向代理的配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /api/ &#123;</span><br><span class="line">rewrite ^/api/(.*)$ /$1 break;</span><br><span class="line">proxy_pass http://127.0.0.1:3000; # 服务端配置的默认端口</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.新增一个服务端配置文件</p><p>admin.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/conf.d</span><br><span class="line">touch admin.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在文件中输入以下内容</span></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name admin.hehuang724.cn; # 域名前加admin</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:3000;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="部署过程遇到的问题："><a href="#部署过程遇到的问题：" class="headerlink" title="部署过程遇到的问题："></a>部署过程遇到的问题：</h2><h3 id="1-linux-上部署-springboot-项目启动成功本地无法访问"><a href="#1-linux-上部署-springboot-项目启动成功本地无法访问" class="headerlink" title="1.linux 上部署 springboot 项目启动成功本地无法访问"></a>1.linux 上部署 springboot 项目启动成功本地无法访问</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙才能访问springboot项目</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 系统是centos8 ,查看其防火墙的状态：</span></span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭后就可以正常访问页面</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启防火墙</span></span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h3 id="2-linux-服务器-mysql-区分表名大小写解决办法"><a href="#2-linux-服务器-mysql-区分表名大小写解决办法" class="headerlink" title="2.linux 服务器 mysql 区分表名大小写解决办法"></a>2.linux 服务器 mysql 区分表名大小写解决办法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">在mysql安装目录(/etc/my.cnf)中的my.cnf文件中[mysqld]下面添加一行配置， lower_case_table_names=1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启mysql服务</span></span><br><span class="line">service mysql restart</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启mysql服务发现报错，原因是只有在初始化的时候设置 lower_case_table_names=1才有效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决办法：卸载mysql，按下操作</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载完mysql后，重新安装，安装完成后，首先立马修改配置文件</span></span><br><span class="line">vi /etc/my.cnf</span><br><span class="line">[mysqld]  下增加</span><br><span class="line">lower_case_table_names=1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置完后重启mysql</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl status mysqld</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 随后按上面的操作重新修改数据库密码</span></span><br></pre></td></tr></table></figure><h3 id="3-卸载-mysql"><a href="#3-卸载-mysql" class="headerlink" title="3.卸载 mysql"></a>3.卸载 mysql</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">1、关闭mysql</span><br><span class="line">service mysqld stop</span><br><span class="line"></span><br><span class="line">2、查看安装的mysql</span><br><span class="line">rpm -qa|grep -i mysql</span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; [root@vultrguest ~]<span class="comment"># rpm -qa|grep -i mysql</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; mysql-community-libs-8.0.23-1.el7.x86_64</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; mysql80-community-release-el7-1.noarch</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; mysql-community-client-8.0.23-1.el7.x86_64</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; mysql-community-common-8.0.23-1.el7.x86_64</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; mysql-community-server-8.0.23-1.el7.x86_64</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; mysql-community-client-plugins-8.0.23-1.el7.x86_64</span></span><br><span class="line"></span><br><span class="line">3、卸载mysql</span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; rpm -ev mysql-community-libs-8.0.23-1.el7.x86_64 --nodeps</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; rpm -ev mysql80-community-release-el7-1.noarch --nodeps</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; rpm -ev mysql-community-client-8.0.23-1.el7.x86_64  --nodeps</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; rpm -ev mysql-community-common-8.0.23-1.el7.x86_64 --nodeps</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; rpm -ev mysql-community-server-8.0.23-1.el7.x86_64 --nodeps</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; rpm -ev mysql-community-client-plugins-8.0.23-1.el7.x86_64 --nodeps</span></span><br><span class="line"></span><br><span class="line">4、找出并删除mysql相关目录</span><br><span class="line">find / -name mysql</span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; [root@vultrguest ~]<span class="comment"># find / -name mysql</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; /var/lib/mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; /var/lib/mysql/mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; /usr/bin/mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; /usr/lib64/mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt; /etc/logrotate.d/mysql</span></span><br><span class="line">rm -rf /var/lib/mysql</span><br><span class="line">rm -rf /var/lib/mysql/mysql</span><br><span class="line">rm -rf /usr/bin/mysql</span><br><span class="line">rm -rf /usr/lib64/mysql</span><br><span class="line">rm -rf /etc/logrotate.d/mysql</span><br><span class="line"></span><br><span class="line">5、删除my.cnf</span><br><span class="line">rm -rf /etc/my.cnf</span><br><span class="line"></span><br><span class="line">6、检查卸载情况</span><br><span class="line">rpm -qa|grep -i mysql</span><br><span class="line">显示为空，卸载完毕。</span><br><span class="line">卸载完成后参考以下博客进行重新安装mysql并配置不区分大小写：</span><br><span class="line">https://blog.csdn.net/qq_35845339/article/details/106547742</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_35845339/article/details/106547742">Linux 下安装 mysql8(并设置不区分数据库表大小写)</a></p><h3 id="4-nginx-解决前端跨域问题"><a href="#4-nginx-解决前端跨域问题" class="headerlink" title="4.nginx 解决前端跨域问题"></a>4.nginx 解决前端跨域问题</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name www.yourdomain.com;    <span class="comment"># 服务器域名或公网ip地址</span></span><br><span class="line">location / &#123;</span><br><span class="line">root /usr/share/nginx/exam;</span><br><span class="line">index index.html index.htm;</span><br><span class="line"><span class="comment"># 添加请求头</span></span><br><span class="line">add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> *;</span><br><span class="line">add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">add_header <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 配置接口</span></span><br><span class="line">location /api &#123;</span><br><span class="line">include uwsgi_params;</span><br><span class="line"><span class="comment"># 代理路径&#x27;/api&#x27;到本地3033端口下(服务启动在3033端口)</span></span><br><span class="line">proxy_pass  http://localhost:3033/api;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="注意-设置-proxy-pass-有可能访问当前域名页面会提示-502BadGate"><a href="#注意-设置-proxy-pass-有可能访问当前域名页面会提示-502BadGate" class="headerlink" title="注意: 设置 proxy_pass 有可能访问当前域名页面会提示 502BadGate"></a>注意: 设置 proxy_pass 有可能访问当前域名页面会提示 502BadGate</h3><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p>查看系统 httpd 配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getsebool -a | grep httpd</span><br></pre></td></tr></table></figure><p>设置 httpd 可以连接到网络，执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsebool httpd_can_network_connect on -P</span><br></pre></td></tr></table></figure><h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><h3 id="1-Linux-相关命令："><a href="#1-Linux-相关命令：" class="headerlink" title="1.Linux 相关命令："></a>1.Linux 相关命令：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 端口进程相关</span></span><br><span class="line">netstat -anp  # 查看端口信息</span><br><span class="line">netstat -anp | grep 3306  # 查看端口信息，过滤3306端口</span><br><span class="line">sudo kill -9 pid号  # 杀死pid对应进程</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> springboot相关</span></span><br><span class="line">nohup java -jar /home/java/exam.jar &gt;exam.log 2&gt;&amp;1 &amp;  # 需修改jar包的路径</span><br><span class="line"><span class="meta">#</span><span class="bash"> nohup：不挂断地运行命令，退出帐户之后继续运行相应的进程。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> exam.log：是nohup把<span class="built_in">command</span>的输出重定向到当前目录的指定的“日志文件名.<span class="built_in">log</span>”文件中，即输出内容不打印到屏幕上，而是输出到<span class="string">&quot;exam.log&quot;</span>文件中。不指定文件名会在当前目录创建nohup.out，如果当前目录的 nohup.out 文件不可写，输出重定向到 <span class="variable">$HOME</span>/nohup.out 文件中。如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2&gt;&amp;1：2就是标准错误，1是标准输出，该命令相当于把标准错误重定向到标准输出么。这里&amp;相当于标准错误等效于标准输出，即把标准错误和标准输出同时输出到指定的“exam.log”文件中。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后的&amp;：让该作业在后台运行</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql相关</span></span><br><span class="line">whereis mysql # 显示mysql的安装和文件目录等</span><br><span class="line">systemctl start mysqld # 启动mysql服务</span><br><span class="line">systemctl enable mysqld # 开启mysql服务</span><br><span class="line">systemctl status mysqld # 显示mysql的状态</span><br></pre></td></tr></table></figure><p>本人将毕业设计在线考试系统已部署到以下地址：</p><p><a href="http://119.23.79.161:8088/">在线考试系统</a></p>]]></content>
      
      
      <categories>
          
          <category> 技能提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连接服务器</title>
      <link href="/wangq1231/2021/03/02/%E2%94%B4%D0%BC%E2%95%9C%E2%95%99%E2%95%96%E2%96%A0%E2%95%AC%D1%91%E2%95%9E%D1%9E/"/>
      <url>/wangq1231/2021/03/02/%E2%94%B4%D0%BC%E2%95%9C%E2%95%99%E2%95%96%E2%96%A0%E2%95%AC%D1%91%E2%95%9E%D1%9E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><p>由于阿里云的活动，我领取了一款云服务器可以免费使用一个月。如下图<br><img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210223140024246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzUyNjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我目前是一个前端开发人员，领取了这个服务器想着是用来搭建自己的网站，由于在这之前也没有 linux 的相关学习经历，在领取该服务器后进行了一系列的操作后才将静态网页上传到服务器并通过公网 ip 访问可以显示出来。便在此处记录下整个过程。</p><span id="more"></span><h2 id="一、领取服务器"><a href="#一、领取服务器" class="headerlink" title="一、领取服务器"></a>一、领取服务器</h2><ol><li> 在领取服务器后首先选择的是服务器的操作系统，这里我选择的是<code>Ubuntu操作系统</code>，版本是<code>14.04 64位</code>。</li><li>完成以上选择后，直接点击购买就可以了。购买完成后打开控制台，在左侧菜单栏里打开<code>实例与镜像 ——&gt; 实例</code>，然后将服务器的密码进行重置<br> <img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210223141413830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzUyNjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>重置完成后，进行远程连接。在这里我选择的是第一个 Workbench 远程连接。然后在密码栏输入刚刚重置的密码，进行登录。登录成功后就进入了命令窗口。在命令窗口输入相关命令就可以对服务器进行一系列操作。<br> <img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210223141722509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzUyNjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h2 id="二、安装配置-nginx"><a href="#二、安装配置-nginx" class="headerlink" title="二、安装配置 nginx"></a>二、安装配置 nginx</h2><p>nginx 是一个高性能的 HTTP 和反向代理 web 服务器。我这里通过 nginx 来配置静态页面，同时也是为了以后方便上传 vue 项目。</p><h3 id="1-通过包管理器安装-nginx："><a href="#1-通过包管理器安装-nginx：" class="headerlink" title="1. 通过包管理器安装 nginx："></a>1. 通过包管理器安装 nginx：</h3><p>Ubuntu 和 CentOS 分别对应于不同的包管理器。<br>这里使用 Ubuntu 系统，所以选择<code>apt-get</code>命令进行安装</p><table><thead><tr><th>操作系统</th><th>文件格式</th><th>工具</th></tr></thead><tbody><tr><td>Ubuntu</td><td>.deb</td><td>apt，<code>apt-get</code>，apt-cache，dpkg</td></tr><tr><td>CentOS</td><td>.rmp</td><td><code>yum</code></td></tr></tbody></table><p>安装命令：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><p>安装成功后可以通过以下命令查看 nginx 进程</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep nginx</span><br></pre></td></tr></table></figure><p>通过包管理器安装 nginx 成功后会默认开启 nginx 服务，直接访问当前服务器公网 ip 即可看到如下页面<br><img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210224171813407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzUyNjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-通过数据源安装-nginx"><a href="#2-通过数据源安装-nginx" class="headerlink" title="2. 通过数据源安装 nginx"></a>2. 通过数据源安装 nginx</h3><p>该方法可以参考了以下博客：<br><a href="https://www.cnblogs.com/emmm/p/12240279.html">阿里云服务器安装 nginx（ubantu16.04）</a></p><h3 id="3-自定义配置-nginx"><a href="#3-自定义配置-nginx" class="headerlink" title="3.自定义配置 nginx"></a>3.自定义配置 nginx</h3><p>在安装完 nginx 后，按照上述步骤，打开公网 IP 就可以看到 nginx 的欢迎页。到这算是成功了一大半。最后可以修改 nginx 中的配置文件，渲染自己的网页。可以参照以下博客：<br><a href="https://blog.csdn.net/SherrybabyOne/article/details/89892415">云服务器 Nginx 配置</a></p><h2 id="三、使用图形化工具管理服务器的文件"><a href="#三、使用图形化工具管理服务器的文件" class="headerlink" title="三、使用图形化工具管理服务器的文件"></a>三、使用图形化工具管理服务器的文件</h2><p>这里我使用的是 WinSCP，安装就不介绍了，安装完成后打开，协议默认，端口默认，用户名一般都是 root，密码就是之前重置的实例密码。<br><img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210223151905844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzUyNjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登录成功后显示如下页面，左边显示的当前你的电脑的硬盘内的文件，右边显示的是服务器的文件。可以直接将左边的文件拖入到右边服务器内。<br><img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210223152053223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzUyNjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这里贴上我的配置文件和目录</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen <span class="number">80</span> default_server;</span><br><span class="line">listen [::]:<span class="number">80</span> default_server ipv6only=on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Make site accessible from http:<span class="comment">//localhost/</span></span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line"><span class="meta">#location / &#123;</span></span><br><span class="line"># First attempt to serve request as file, then</span><br><span class="line"><span class="meta"># as directory, then fall back to displaying a 404.</span></span><br><span class="line"># try_files $uri $uri/ =<span class="number">404</span>;</span><br><span class="line"># Uncomment to enable naxsi on <span class="keyword">this</span> location</span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> /etc/nginx/naxsi.rules</span></span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">  # 静态页面存放在这个路径</span><br><span class="line">          root /home/qd/html;</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">            try_files $uri $uri/  /index.html;</span><br><span class="line">     &#125;</span><br><span class="line"># Only <span class="keyword">for</span> nginx-naxsi used with nginx-naxsi-ui : process denied requests</span><br><span class="line"><span class="meta">#location /RequestDenied &#123;</span></span><br><span class="line">#proxy_pass http:<span class="comment">//127.0.0.1:8080;</span></span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line">#error_page <span class="number">404</span> /<span class="number">404.</span>html;</span><br><span class="line"></span><br><span class="line"><span class="meta"># redirect server <span class="meta-keyword">error</span> pages to the static page /50x.html</span></span><br><span class="line">#</span><br><span class="line">#error_page <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /<span class="number">50</span>x.html;</span><br><span class="line"><span class="meta">#location = /50x.html &#123;</span></span><br><span class="line"><span class="meta">#root /usr/share/nginx/html;</span></span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">#</span><br><span class="line"><span class="meta">#location ~ \.php$ &#123;</span></span><br><span class="line">#fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">## NOTE: You should have <span class="string">&quot;cgi.fix_pathinfo = 0;&quot;</span> in php.ini</span><br><span class="line">#</span><br><span class="line">## With php5-cgi alone:</span><br><span class="line">#fastcgi_pass <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9000</span>;</span><br><span class="line">## With php5-fpm:</span><br><span class="line">#fastcgi_pass unix:/var/run/php5-fpm.sock;</span><br><span class="line">#fastcgi_index index.php;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> fastcgi_params;</span></span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># deny access to .htaccess files, <span class="meta-keyword">if</span> Apache<span class="meta-string">&#x27;s document root</span></span></span><br><span class="line"><span class="meta-string"><span class="meta"># concurs with nginx&#x27;</span>s one</span></span><br><span class="line">#</span><br><span class="line"><span class="meta">#location ~ /\.ht &#123;</span></span><br><span class="line"><span class="meta">#deny all;</span></span><br><span class="line">#&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210223152742523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzUyNjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>至此就可以正常的显示你上传的静态页面了。同理，vue 项目只需要将打包后的 dist 目录拖到这个静态页面路径内。后面再慢慢研究服务端上传服务器。</p>]]></content>
      
      
      <categories>
          
          <category> 技能提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git clone 加速</title>
      <link href="/wangq1231/2021/02/20/git-clone-%E2%95%9D%E2%95%99%E2%95%A6%E2%94%98/"/>
      <url>/wangq1231/2021/02/20/git-clone-%E2%95%9D%E2%95%99%E2%95%A6%E2%94%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><blockquote><p>在拷贝 github 上优秀的开源项目时，每次使用 git<br>clone 命令都要等好久。上网查找了很多办法，有改 host 文件的，也有修改 ip 的。还有把项目 fork 再添加到 gitee 中再 clone 的(因为 gitee 是国内的服务器，再 clone 就会很快)。都比较麻烦</p></blockquote><p>这里有两个很简便的方法亲测有效<br>以 clone vue 为例：</p><blockquote><p><code>git clone https://github.com/vuejs/vue.git</code></p></blockquote><h1 id="1-使用-cnpm-代理"><a href="#1-使用-cnpm-代理" class="headerlink" title="1. 使用 cnpm 代理"></a>1. 使用 cnpm 代理</h1><blockquote><p>git clone <a href="https://github.com.cnpmjs.org/vuejs/vue.git">https://github.com.cnpmjs.org/vuejs/vue.git</a></p></blockquote><h1 id="2-使用码云的镜像"><a href="#2-使用码云的镜像" class="headerlink" title="2. 使用码云的镜像"></a>2. 使用码云的镜像</h1><blockquote><p>git clone <a href="https://gitee.com/mirrors/vue.git">https://gitee.com/mirrors/vue.git</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技能提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3 新特性——在css中使用js变量</title>
      <link href="/wangq1231/2021/02/20/vue3-%E2%95%A8%E2%94%AC%E2%95%A0%E2%95%AA%E2%95%A8%E2%95%98%D0%B1%D0%BA%D0%B1%D0%BA%D0%B1%D0%BA%E2%95%98%E2%94%8Ccss%E2%95%93%E2%95%A8%E2%95%A9%E2%95%A3%E2%95%99%E2%94%9Cjs%E2%96%92%D1%84%E2%94%B4%E2%94%90/"/>
      <url>/wangq1231/2021/02/20/vue3-%E2%95%A8%E2%94%AC%E2%95%A0%E2%95%AA%E2%95%A8%E2%95%98%D0%B1%D0%BA%D0%B1%D0%BA%D0%B1%D0%BA%E2%95%98%E2%94%8Ccss%E2%95%93%E2%95%A8%E2%95%A9%E2%95%A3%E2%95%99%E2%94%9Cjs%E2%96%92%D1%84%E2%94%B4%E2%94%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><blockquote><p>最近在 github 上发现一个 Vue3 非常好玩的特性，这个特性我以前就经常这么想：要是我在 data 里面定义的变量也能在 CSS 里面用那该多好啊！(大家有没有也这么想过)</p></blockquote><h3 id="幻想"><a href="#幻想" class="headerlink" title="幻想"></a><strong>幻想</strong></h3><p>以前做项目的时候经常会这么想：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; color &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">color</span>: this.color;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，想想也知道不可能，JS 和 CSS 隶属不同上下文，CSS 哪来的 this 呢？</p><p>那么怎么才能在 CSS 中使用 JS 变量呢？那就只能用 JS 操作 DOM 然后把变量塞进 style 里了，比如用 ref 获取到 DOM 元素，然后 dom.style.color = this.color。</p><span id="more"></span><p>或者在模板里：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color &#125;&quot;</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过这种方式还是有缺陷的，比如本来就不推荐把样式写在 style 属性里，还有就是变量复用会很麻烦，比如一组 DOM 元素都想用这个变量，那就不得不给这一组起个类名，然后再在 mounted 里面 document.getElementsByClassName()，获取到 DOM 集合之后还要循环遍历每个元素，为其加上 dom.style.color = this.color，浪费了很多的性能。</p><p>其实 CSS 很多缺陷，并不图灵完备，所以才导致了各种预处理器的出现：Sass、Less、Stylus 等……</p><p>它们为 CSS 提供了很多特性：循环、条件语句、变量、函数等……</p><p>其中有个特性非常有用，那就是变量！于是 CSS 也引入了变量的这个概念，自从有了 CSS 变量，很多事情真的方便了许多，通过 JS 操作 CSS 变量，然后再在需要的地方使用 CSS 变量，这种方法比之前的高效得多。</p><h3 id="什么是-CSS-变量"><a href="#什么是-CSS-变量" class="headerlink" title="什么是 CSS 变量"></a>什么是 CSS 变量</h3><p>在 JS 里(不止 JS，所有语言都差不多)，变量有如下几个特性：</p><ul><li>声明</li><li>使用</li><li>作用域</li></ul><p><strong><em>声明</em></strong></p><p>为了方便理解，咱们通过用 JS 的方式来类比：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">&quot;red&quot;</span>;</span><br></pre></td></tr></table></figure><p>在 CSS 中等同于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--color: red;</span><br></pre></td></tr></table></figure><p>当然这点跟 JS 不太一样，但是如果你学 PHP 这类语言或者 Sass 的话应该就很好理解了，在 PHP 或 Sass 中，声明变量的时候没有一个关键字，而是在变量名的第一位加上一个美元符号 $，这就代表声明变量了。</p><p>PHP:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$color = <span class="string">&quot;red&quot;</span>;</span><br></pre></td></tr></table></figure><p>Sass:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$color: color;</span><br></pre></td></tr></table></figure><p>但是 $ 符号被 Sass 占用了，@ 符号被 less 占了，所以 CSS 只能想出别的符号了，CSS 的符号就是两个减号 –</p><p><strong><em>使用</em></strong><br>光声明一个变量是没有什么太大意义的，只有使用了它，这个变量才算有价值：</p><p>JS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(color);</span><br></pre></td></tr></table></figure><p>可以看到 var 只是个声明变量的关键字，color 才是变量名。</p><p>PHP:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $color;</span><br></pre></td></tr></table></figure><p>Scss:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123;</span><br><span class="line">    <span class="attr">color</span>: $color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在 PHP 或 Sass 中，声明变量的时候带着$，用的时候也得带着$。</p><p>这就令许多开发者感到困惑，所以 CSS 在使用变量的时候用到了一个函数叫 var()：</p><p>CSS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="keyword">var</span>(--color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然和 PHP、Sass 一样，调用时要带着前缀(因为那就是变量名的一部分)，但是不一样的是需要用一个 var() 来把变量包裹起来。</p><p>作用域</p><p>这个很好理解，不仅 JS 里有作用域，CSS 里也有作用域，比如：</p><p>JS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">h1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">div</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1(); <span class="comment">// red</span></span><br><span class="line">div(); <span class="comment">// blue</span></span><br></pre></td></tr></table></figure><p>类似于 CSS 里的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    --color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1 &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="keyword">var</span>(--color); <span class="comment">/** 这里获取到的是全局声明的变量，值为red **/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div &#123;</span><br><span class="line">    --color: blue;</span><br><span class="line">    color: <span class="keyword">var</span>(--color); <span class="comment">/** 这里获取到的是局部声明的变量，值为blue **/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，变量的作用域就是它所在的选择器的有效范围。</p><p>中文 CSS 变量<br>有一次我看到了两个脑洞大开的库，才发现 CSS 变量还可以这么玩：</p><p><a href="https://www.mybj123.com/gohref.php?url=https://www.yuque.com/fancy-components/xflqsh/yxn4m7">chinese-gradient</a></p><p><a href="https://www.mybj123.com/gohref.php?url=https://www.yuque.com/fancy-components/oco0rf/ded6m5">chinese-layout</a></p><p>从他俩的名字就可以看出，都是用 chinese 开头的，那么大概率就是用中文做的 CSS 变量，点进去一看果不其然。</p><p>也就是说 CSS 变量的包容性很强，不像以往编程的时候都必须是英文命名，中文这次居然也可以完美运行，不信咱们来试一下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在这里用link标签引入中文布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/chinese-layout&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在这里用link标签引入中文渐变色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag"><span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/chinese-gradient&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 清除默认样式 */</span></span></span><br><span class="line"><span class="css">* &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 全屏显示 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 在父元素上写入九宫格 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="css">grid: <span class="built_in">var</span>(--九宫格);</span></span><br><span class="line"><span class="css">gap: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 给子元素上色 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">background</span>: <span class="built_in">var</span>(--极光绿);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210114142247973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzUyNjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="中文-CSS-变量"><a href="#中文-CSS-变量" class="headerlink" title="中文 CSS 变量"></a>中文 CSS 变量</h3><p>也就是说，CSS 变量可以这样定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body &#123; --蓝绿色: aquamarine; &#125;</span><br></pre></td></tr></table></figure><p>然后调用的时候：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123; color: var(--蓝绿色); &#125;</span><br></pre></td></tr></table></figure><p>在 vue 中的变量 那么怎样才能在 vue3 的 style 中使用 script 里声明的变量呢？</p><p>首先我们先创建个支持 vue3 的 vite 项目：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite-app vars</span><br></pre></td></tr></table></figure><p>然后进入到该文件夹安装依赖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd vars</span><br><span class="line"></span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p>然后创建一个组件，组件型式长这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; color &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">vars</span>=<span class="string">&quot;&#123; color &#125;&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还记得文章一开始写的幻想中的组件是什么样吗：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">color</span>: this.color;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是就算 vue 再牛它也不可能给 CSS 安个 this 啊，除非再做一个什么预处理器，不过这次利用 CSS 变量已经可以很接近咱们幻想中的组件啦：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">vars</span>=<span class="string">&quot;&#123; color &#125;&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先要在 ‘style’ 标签中写个 vars=”{}”，再在大括号里写上你在 data 中声明过的值。</p><p>再来试一下这个变量是不是响应式的，动态改变 ‘script’ 标签中的 this.color 值会不会引起视图的变化呢？来试一下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">opacity</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">setInterval</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.opacity &gt;= <span class="number">1</span> &amp;&amp; (<span class="built_in">this</span>.opacity = <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.opacity += <span class="number">0.2</span>;</span></span><br><span class="line"><span class="javascript">&#125;, <span class="number">300</span>);</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">vars</span>=<span class="string">&quot;&#123; opacity &#125;&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">65</span>, <span class="number">184</span>, <span class="number">131</span>);</span></span><br><span class="line"><span class="css"><span class="attribute">opacity</span>: <span class="built_in">var</span>(--opacity);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210114142404898.png" alt="在这里插入图片描述"></p><p>可以看到每 300 毫秒我们就改变一下 this.opacity 的值，它会映射到 CSS 变量上去，this.opacity 变了，–opacity 的值就会随之变化，视图也会随着数据的更新而相应的更新，这个特性简直太棒了！</p><p>多个变量之间使用逗号进行分隔：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">border</span>: <span class="string">&quot;1px solid black&quot;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">vars</span>=<span class="string">&quot;&#123; border, color &#125;&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span></span><br><span class="line"><span class="css"><span class="attribute">border</span>: <span class="built_in">var</span>(--border);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>脑洞大开<br>既然 chinese-gradient 和 chinese-layout 这两个 CSS 库验证了 CSS 中文变量的可行性，而且我记得对象的属性也是可以写中文的，那么咱们就来试一下在 vue 中能不能用这种黑魔法来写中文：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">透明度: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">setInterval</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>[<span class="string">&quot;透明度&quot;</span>] &gt;= <span class="number">1</span> &amp;&amp; (<span class="built_in">this</span>[<span class="string">&quot;透明度&quot;</span>] = <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>[<span class="string">&quot;透明度&quot;</span>] += <span class="number">0.2</span>;</span></span><br><span class="line"><span class="javascript">&#125;, <span class="number">300</span>);</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">vars</span>=<span class="string">&quot;&#123; 透明度 &#125;&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">65</span>, <span class="number">184</span>, <span class="number">131</span>);</span></span><br><span class="line"><span class="css"><span class="attribute">opacity</span>: <span class="built_in">var</span>(--透明度);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2021011414250032.png" alt="在这里插入图片描述"></p><p>居！然！管！用！了！这真是神了！</p><p>以后大家不会命名的话也别用汉语拼音了，直接写中文吧哈哈！后续维护的时候一看变量名就能一目了然(不过还是推荐用英文)。</p><p><strong><em>原理</em></strong><br>猜也能猜到，大概率是用到了类似于 dom.style.setProperty(‘–opacity’, this.opacity) 之类的方法，按下 f12 打开控制台一看，果不其然，它控制的是组件元素的 style 属性：<br><img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210114142527117.png" alt="在这里插入图片描述"></p><p>style 中元素<br>不过我们刚才在 ‘style’ 标签中只用到了 var，scoped 其实也很常用，那么如果他们两个碰到一起去会编译成什么样呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">vars</span>=<span class="string">&quot;&#123; 透明度 &#125;&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">color</span>: <span class="built_in">var</span>(--透明度);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210114142539680.png" alt="在这里插入图片描述"></p><p>编译运行结果<br>可以看到 Vue 把 CSS 变量也编译了一个和 data-v- 后面的那串随机字符一样的：<br><img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210114142547734.png" alt="在这里插入图片描述"></p><p>Vue 把 CSS 变量也编译了一个和 data-v- 后面的那串随机字符一样<br>那么问题来了，假如我要是在全局样式里定义了一个 –color 属性，我在带有 scoped 属性的组件里想用这个全局的 CSS 变量，可是一旦在 scoped 中使用 CSS 变量就会被编译成：–62a9ebed-color，可是全局定义的不是 –62a9ebed-color 而是 –color，这样就会出现找不到全局属性的局面，这个问题要怎么解决呢？其实也很简单，只需要在–的后面加上一个 global: 就可以了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">vars</span>=<span class="string">&quot;&#123; color &#125;&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">color</span>: <span class="built_in">var</span>(--global: color);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样编译出来的 CSS 就会变成：var(–color) 啦！</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>怎么样是不是很好玩？Vue 这次更新诚意满满，不过大家都把关注点放在了 Composition-API 上了，没有注意到这些不起眼的边边角角，但就是这些边边角角却可以极大的提高我们的开发体验。</p><p>对了，CSS 变量也是有兼容性的:<br><img src= "/wangq1231/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210114142620164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzUyNjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>从 caniuse 网站上可以看到，它是不兼容 IE 的，使用的时候记得确认一下自己项目需要兼容的范围。</p><p>好了，以上就是今天关于 Vue3 新特性在 CSS 中使用 JS 变量全部内容，希望对大家有用，也欢迎大家留言讨论。</p><p>The End.</p>]]></content>
      
      
      <categories>
          
          <category> 技能提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> vue3 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo commands</title>
      <link href="/wangq1231/2021/02/19/hexo-commands/"/>
      <url>/wangq1231/2021/02/19/hexo-commands/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/wangq1231/css/APlayer.min.css"><script src="/wangq1231/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/wangq1231/js/Meting.min.js"></script><h3 id="1-hexo-的安装"><a href="#1-hexo-的安装" class="headerlink" title="1.hexo 的安装"></a>1.hexo 的安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="2-hexo-的相关命令"><a href="#2-hexo-的相关命令" class="headerlink" title="2.hexo 的相关命令"></a>2.hexo 的相关命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hexo init [folder] # 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站</span><br><span class="line"></span><br><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;postName&quot;</span> # 新建文章</span><br><span class="line"></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">&quot;pageName&quot;</span> # 新建页面</span><br><span class="line"></span><br><span class="line">hexo generate # 生成静态页面至public目录</span><br><span class="line"></span><br><span class="line">hexo server # 开启预览访问端口（默认端口<span class="number">4000</span>，<span class="string">&#x27;ctrl + c&#x27;</span>关闭server）</span><br><span class="line"></span><br><span class="line">hexo deploy # 部署到GitHub</span><br><span class="line"></span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line"></span><br><span class="line">hexo version  # 查看Hexo的版本</span><br><span class="line"></span><br><span class="line">hexo clean # 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令相关的缩写形式</span></span><br><span class="line">hexo n == hexo <span class="keyword">new</span></span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合命令</span></span><br><span class="line">hexo s -g # 生成并本地预览</span><br><span class="line">hexo d -g # 生成并上传</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技能提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
